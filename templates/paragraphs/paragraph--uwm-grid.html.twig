{#
/**
 * @file
 * Default theme implementation to display a paragraph in Bootstrap Paragraphs.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   - id: The paragraph ID.
 *   - bundle: The type of the paragraph, for example, "image" or "text".
 *   - authorid: The user ID of the paragraph author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling format_date() with the desired parameters on
 *     $variables['paragraph']->getCreatedTime().
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}


{# The template default set classes. #}
{# Sets Paragraph ID as class. #}
{%
set classes = [
'paragraph',
'paragraph--type--' ~ paragraph.bundle|clean_class,
view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
'paragraph--id--' ~ paragraph.id.value,
]
%}

{% if content.field_uwm_columns_per_row %}
    {% set number_columns = content.field_uwm_columns_per_row['#items'].getString() %}
    {% set col_width = ["col-lg-" ~ 12 / number_columns, "col-sm-6"] %}
    {% set classes = classes|merge(col_width) %}
{% endif %}


{# Let's iterate over the items to determine how we want to print them #}
{% set has_cards = false %}
{% for key, item in content.field_uwm_columns if key|first != '#' %}
    {% if not has_cards %}
        {% set has_cards = item["#paragraph"].bundle == "uwm_card" %}
    {% endif %}
{% endfor %}

{% if has_cards %}
<div class="card-deck">
{% for key, item in content.field_uwm_columns if key|first != '#' %}
    {# <div {{ attributes.addClass(classes).addClass('card') }}> #}
        {{ item }}

        {% if loop.index % 2 == 0 %}
            <div class="w-100 d-lg-none my-3"></div>
        {% endif %}
    {# </div> #}
{% endfor %}
</div>
{% else %}
<div class="row">
{% for key, item in content.field_uwm_columns if key|first != '#' %}
    <div {{ attributes.addClass(classes) }}>
        {{ item }}
    </div>
{% endfor %}
</div>
{% endif %}
