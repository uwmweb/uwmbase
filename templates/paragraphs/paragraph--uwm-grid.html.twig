{#
/**
 * @file
 * Default theme implementation to display a paragraph in Bootstrap Paragraphs.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   - id: The paragraph ID.
 *   - bundle: The type of the paragraph, for example, "image" or "text".
 *   - authorid: The user ID of the paragraph author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling format_date() with the desired parameters on
 *     $variables['paragraph']->getCreatedTime().
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}


{# The template default set classes. #}
{# Sets Paragraph ID as class. #}
{%
set classes = [
'paragraph',
'paragraph--type--' ~ paragraph.bundle|clean_class,
view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
'paragraph--id--' ~ paragraph.id.value,
]
%}

{% if content.field_uwm_columns_per_row %}
    {% set number_columns = content.field_uwm_columns_per_row['#items'].getString() %}
    {% set col_width = ["col-lg-" ~ 12 / number_columns, "col-sm-6"] %}
    {% set classes = classes|merge(col_width) %}
{% endif %}

{# TODO: Figure out how to adjust column spacing while maintaining same height and alignment with row on left and right #}
{# {% if content.field_uwm_column_spacing %}
    {% set spacing = content.field_uwm_column_spacing['#items'].getString() %}
    {% set padding_class = [
        '2' == spacing ? 'px-lg-2',
        '3' == spacing ? 'px-lg-1',
        '4' == spacing ? 'px-lg-1',
    ]
    %}
    {% set first_col_padding_class = [
        '2' == spacing ? 'pr-lg-2',
        '3' == spacing ? 'pr-lg-1',
        '4' == spacing ? 'pr-lg-1',
    ]
    %}
    {% set last_col_padding_class = [
        '2' == spacing ? 'pl-lg-2',
        '3' == spacing ? 'pl-lg-1',
        '4' == spacing ? 'pl-lg-1',
    ]
    %}
{% endif %} #}


<div class="row">
{% for key, item in content.field_uwm_columns if key|first != '#' %}
    {% set next = key + 1 %}
    {% if key is same as(0) and content.field_uwm_columns[next] is defined %}
        <div {{ attributes.addClass(classes).addClass(first_col_padding_class) }}>
    {% elseif key is not same as(0) and content.field_uwm_columns[next] is defined %}
        <div {{ attributes.addClass(classes).addClass(padding_class).removeClass(first_col_padding_class) }}>
    {% elseif key is not same as(0) and content.field_uwm_columns[next] is not defined %}
        <div {{ attributes.addClass(classes).addClass(last_col_padding_classes).removeClass(padding_class) }}>
    {% endif %}
        {{ item }}
    </div>
{% endfor %}
</div>
