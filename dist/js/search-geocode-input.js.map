{"version":3,"sources":["search-geocode-input.js"],"names":["$","Drupal","GOOGLE_API_KEY","GOOGLE_API_KEY_TEMP","GOOGLE_GEOCODER_BASEURL","GOOGLE_FILTER_BOUNDING_BOX","GOOGLE_FILTER_COMPONENTS","MATCHED_COORDINATES","lat","lng","USER_SEARCH_STRING","behaviors","uwmGeocodeInputInit","attach","context","settings","document","ready","$input","getGeocodeInput","keypress","e","which","val","getGeocodeResponse","$container","find","length","append","queryString","apikey","window","location","host","indexOf","ajax","url","dataType","type","data","key","address","bounds","component","success","response","status","handleGeocodeSuccess","handleGeocodeError","error","xhr","setResponseMessage","apiResponse","isValid","i","item","results","arr","toLowerCase","split","forEach","pt","formatted_address","geometry","JSON","stringify","message","jQuery"],"mappings":"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","file":"search-geocode-input.js","sourcesContent":["/**\n *\n * @file\n * Custom JavaScript for UW Medicine.\n *\n * @note\n * Component filtering does not support neighborhood; locality component filter\n * not more useful than lat/lng bounds field\n *\n *\n *\n */\n//\n(function ($, Drupal) {\n\n  /**\n   * Provide API key for requests.\n   * @see https://console.cloud.google.com/home/dashboard?project=uw-medicine\n   * @type {string}\n   */\n  const GOOGLE_API_KEY = 'AIzaSyDtdMuu9kpdNE--4xUNT1aSuy-wh9vxFtg';\n\n  /**\n   * Provide API key without hostname restrictions.\n   * @see https://console.cloud.google.com/home/dashboard?project=uw-medicine\n   * @type {string}\n   */\n  const GOOGLE_API_KEY_TEMP = 'AIzaSyB6ziIhPThPpqSPKLeJKs1wnblBXQbbxe4';\n  /**\n   * Provide base url for our geocode, Google.\n   * @see https://developers.google.com/maps/documentation/geocoding/start\n   * @type {string}\n   */\n  const GOOGLE_GEOCODER_BASEURL = 'https://maps.googleapis.com/maps/api/geocode/json?';\n\n  /**\n   * Preferred bounding box for results.\n   * @see https://developers.google.com/maps/documentation/geocoding/intro#Viewports\n   * @type {string}\n   */\n  const GOOGLE_FILTER_BOUNDING_BOX = '46.709241,-123.422571|48.254976,-119.381319';\n\n  /**\n   * Limit results to these criteria.\n   * @see https://developers.google.com/maps/documentation/geocoding/intro#ComponentFiltering\n   * @type {string}\n   */\n  const GOOGLE_FILTER_COMPONENTS = ''; // 'country:US';\n\n  /**\n   *\n   * @type {{lat: string, lng: string}}\n   */\n  const MATCHED_COORDINATES = {\n    lat: '', lng: ''\n  };\n\n  /**\n   *\n   * @type {string}\n   */\n  let USER_SEARCH_STRING = '';\n\n  /**\n   * Attach behaviors once Drupal readies page.\n   * @type {{attach(*, *): void}}\n   */\n  Drupal.behaviors.uwmGeocodeInputInit = {\n\n    attach(context, settings) {\n\n      $(document).ready(() => {\n\n        const $input = getGeocodeInput();\n        $input.keypress(e => {\n          if (e.which === 13) {\n            USER_SEARCH_STRING = $input.val();\n            getGeocodeResponse();\n          }\n        });\n      });\n\n    }\n\n  };\n\n\n  /*\n   * PRIVATE FUNCTIONS\n   *\n   */\n\n  /**\n   *\n   * @return {*|HTMLElement}\n   */\n  const getGeocodeInput = function () {\n\n    const $container = $('section.content-topper');\n    if (!$container.find('input[name=place-search]').length) {\n\n      const $input = $('<input class=\"geo-location-input form-control form-control-lg\" name=\"place-search\" placeholder=\"Search location\">');\n      $container.append($input);\n\n    }\n\n    return $container.find('input[name=place-search]');\n  };\n\n  /**\n   *\n   * @param queryString\n   */\n  const getGeocodeResponse = function (queryString) {\n\n    let apikey = GOOGLE_API_KEY;\n    if (window.location.host.indexOf('local') > 0) {\n      apikey = GOOGLE_API_KEY_TEMP;\n    }\n\n    $.ajax({\n      url: GOOGLE_GEOCODER_BASEURL,\n      dataType: \"json\",\n      type: \"GET\",\n      data: {\n        key: apikey,\n        address: USER_SEARCH_STRING,\n        bounds: GOOGLE_FILTER_BOUNDING_BOX,\n        component: GOOGLE_FILTER_COMPONENTS\n      },\n      success(response) {\n        if (response.status === \"OK\") {\n          handleGeocodeSuccess(response);\n        }\n        else {\n          handleGeocodeError(response);\n        }\n      },\n      error(xhr) {\n        handleGeocodeError();\n      }\n    });\n\n    setResponseMessage(`Searching for ${  USER_SEARCH_STRING  }...`);\n\n  };\n\n  /**\n   *\n   * @param apiResponse\n   * @return {*}\n   */\n  const handleGeocodeSuccess = function (apiResponse) {\n\n    let isValid = false;\n    setResponseMessage(`Found results for ${  USER_SEARCH_STRING  }.`);\n\n    for (let i = 0; i < apiResponse.results.length; i++) {\n\n      const item = apiResponse.results[i];\n\n      // Do our match validation...\n      // The geocode API assumes an address was provided. Since we may have any\n      // search string, and parsing Google address component is brittle,\n      // let's just validate the user input is in the formatted result.\n      const arr = USER_SEARCH_STRING.toLowerCase().split(' ');\n      arr.forEach((pt) => {\n        if (item.formatted_address.toLowerCase().indexOf(pt) >= 0) {\n          isValid = true;\n        }\n      });\n\n      // Save preferred result...\n      if (isValid && item && item.geometry && item.geometry.location) {\n\n        MATCHED_COORDINATES.lat = item.geometry.location.lat;\n        MATCHED_COORDINATES.lng = item.geometry.location.lng;\n\n        setResponseMessage(`Searching ${  USER_SEARCH_STRING  } matched '${  item.formatted_address  }' (${  JSON.stringify(MATCHED_COORDINATES)  })`);\n\n        $('input[name=uml]').val(`${MATCHED_COORDINATES.lat },${ MATCHED_COORDINATES.lng}`);\n\n      }\n\n    }\n\n  };\n\n  /**\n   *\n   * @param apiResponse\n   * @return {*}\n   */\n  const handleGeocodeError = function (apiResponse) {\n\n    setResponseMessage(`No results for \"${  USER_SEARCH_STRING }\"`);\n\n  };\n\n  /**\n   *\n   * @param message\n   */\n  const setResponseMessage = function (message) {\n\n    const $input = getGeocodeInput();\n    $input.val(message);\n\n  };\n\n\n})\n(jQuery, Drupal);\n"]}