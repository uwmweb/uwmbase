{"version":3,"sources":["search-geocode-input.js"],"names":["$","Drupal","GOOGLE_API_KEY","GOOGLE_API_KEY_TEMP","GOOGLE_GEOCODER_BASEURL","GOOGLE_FILTER_BOUNDING_BOX","GOOGLE_FILTER_COMPONENTS","currentLocationText","locationLoadingText","behaviors","uwmGeocodeInputInit","attach","context","settings","$form","length","$wrapper","parent","$addressContainer","find","$addressInput","$currentLocationDropdown","$currentLocationDropdownMenu","$currentLocationDropdownToggle","$useMyLocationLink","$latlngHiddenInput","val","addClass","openDropdown","is","attr","closeDropdown","removeClass","on","e","preventDefault","focus","getGeocodeResponse","getNavigatorUserLocation","target","queryString","clearUserLocation","apikey","window","location","host","indexOf","ajax","url","dataType","type","data","address","getCleanedKeywordSearch","bounds","components","key","success","response","status","parseGeocodeResponse","handleGeocodeError","error","xhr","complete","navigator","geolocation","prop","options","userAgent","enableHighAccuracy","getCurrentPosition","position","handleGeocodeSuccess","coords","latitude","longitude","err","apiResponse","isValid","i","results","item","geometry","lat","lng","updateInputText","setUserMessage","returnValue","trim","srt","uwdm_gtm_search_location_keywords_replacements","forEach","search_keywords","replacement_keywords","searchWord","toLowerCase","message","text","jQuery"],"mappings":"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","file":"search-geocode-input.js","sourcesContent":["// Sample JSON for Google Tag Manager and hook to\n// replace a user's search term with the terms we provide:\n//\n// const uwdm_gtm_search_location_keywords_replacements = [\n//   {\n//     \"search_keywords\": \"Ravenna\",\n//     \"replacement_keywords\": \"Ravenna, Seattle, WA\",\n//     \"match_full_text_only\": \"TRUE\"\n//   }, {\n//     \"search_keywords\": \"Ballard\",\n//     \"replacement_keywords\": \"Ballard, Seattle, WA\",\n//     \"match_full_text_only\": \"TRUE\"\n//   }\n// ];\n\n\n/**\n *\n * Script to take the address a user has typed in our location search form,\n * and to query Google's Geocode API for the best possible location match. We\n * then use the latitude/ longitude for a Drupal locations search.\n *\n */\n(function ($, Drupal) {\n\n  /**\n   * Provide API key for requests.\n   * @see https://console.cloud.google.com/home/dashboard?project=uw-medicine\n   * @type {string}\n   */\n  const GOOGLE_API_KEY = 'AIzaSyDyy0tzNE5Pvxx-hWO_SIgb-guPGWOo2vo';\n\n  /**\n   * Provide API key without hostname restrictions.\n   * @see https://console.cloud.google.com/home/dashboard?project=uw-medicine\n   * @type {string}\n   */\n  const GOOGLE_API_KEY_TEMP = 'AIzaSyB6ziIhPThPpqSPKLeJKs1wnblBXQbbxe4';\n  /**\n   * Provide base url for our geocode, Google.\n   * @see https://developers.google.com/maps/documentation/geocoding/start\n   * @type {string}\n   */\n  const GOOGLE_GEOCODER_BASEURL = 'https://maps.googleapis.com/maps/api/geocode/json?';\n\n  /**\n   * Preferred bounding box for results.\n   * @see https://developers.google.com/maps/documentation/geocoding/intro#Viewports\n   * @type {string}\n   */\n  const GOOGLE_FILTER_BOUNDING_BOX = '46.709241,-123.422571|48.254976,-119.381319';\n\n  /**\n   * Limit results to these criteria.\n   * @see https://developers.google.com/maps/documentation/geocoding/intro#ComponentFiltering\n   * @type {string}\n   */\n    // const GOOGLE_FILTER_COMPONENTS = 'administrative_area_level_1:WA|country:US';\n  const GOOGLE_FILTER_COMPONENTS = '';\n\n  /**\n   * Text to set in input when user clicks to use their current location.\n   * @type {string}\n   */\n  const currentLocationText = 'Current location';\n\n  /**\n   *\n   */\n  const locationLoadingText = 'Retrieving your location...';\n\n  /**\n   * Attach behaviors once Drupal readies page.\n   * @type {{attach(*, *): void}}\n   */\n  Drupal.behaviors.uwmGeocodeInputInit = {\n\n    attach(context, settings) {\n\n      const $form = $('section.content-topper form[id*=\"uwm-locations-geo-search\"]', context);\n\n      if (!$form.length) {\n        return;\n      }\n\n      const $wrapper = $form.parent('.filters-wrap');\n      const $addressContainer = $form.find('.location-address-keywords');\n      const $addressInput = $addressContainer.find('input[name=l]');\n      const $currentLocationDropdown = $addressContainer.find('.field-suffix .dropdown');\n      const $currentLocationDropdownMenu = $addressContainer.find('.field-suffix .dropdown-menu');\n      const $currentLocationDropdownToggle = $addressContainer.find('.field-suffix .toggle-uml-dropdown');\n      const $useMyLocationLink = $addressContainer.find('.dropdown a');\n      const $latlngHiddenInput = $form.find('input[name=latlng]');\n\n\n      // Set CSS classes on load to indicate if geocoded or current-location\n      // search is active.\n      if ($latlngHiddenInput.length && $latlngHiddenInput.val().length > 0) {\n        $(\"body\").addClass(\"search-with-geocoding\");\n\n        if ($addressInput.length && $addressInput.val() === 'Current location') {\n          $(\"body\").addClass(\"search-with-current-location\");\n        }\n      }\n\n      /**\n       * Open the \"Use my location\" dropdown, if hidden.\n       */\n      const openDropdown = function () {\n        if ($currentLocationDropdownMenu.is(':hidden')) {\n          $currentLocationDropdown.addClass('uwm-display-dropdown');\n          $addressContainer.addClass('active');\n          $currentLocationDropdownToggle.attr('aria-expanded', 'true');\n        }\n      };\n\n      /**\n       * Close the \"Use my location\" dropdown, if open.\n       */\n      const closeDropdown = function () {\n        if ($currentLocationDropdownMenu.is(':visible')) {\n          $currentLocationDropdown.removeClass('uwm-display-dropdown');\n          $addressContainer.removeClass('active');\n          $currentLocationDropdownToggle.attr('aria-expanded', 'false');\n        }\n      };\n\n      // On current-location icon click, toggle the dropdown.\n      $currentLocationDropdownToggle.on('click', e => {\n        e.preventDefault();\n\n        if ($currentLocationDropdownMenu.is(':hidden')) {\n          // Focus the address input; that handler opens the dropdown.\n          $addressInput.focus();\n        }\n        else {\n          closeDropdown();\n        }\n      });\n\n      // On address input focus, open dropdown.\n      $addressInput.on('focus', e => {\n        openDropdown();\n      });\n\n      // On address input blur, call geocoding.\n      // It will bypass if current location was selected, or if empty.\n      $addressInput.on('blur', e => {\n        getGeocodeResponse($addressInput.val());\n      });\n\n      // On Use-my-location dropdown link click, request user location via\n      // browser and close dropdown.\n      $useMyLocationLink.on('click', e => {\n        e.preventDefault();\n\n        closeDropdown();\n\n        getNavigatorUserLocation();\n      });\n\n      // On Use-my-location link blur, close the dropdown.\n      $useMyLocationLink.on('blur', e => {\n        closeDropdown();\n      });\n\n      // On any 'focusin' event within the form wrapper, if the element being\n      // focused is not within the address container, close dropdown.\n      $wrapper.on('focusin', e => {\n\n        if ($addressContainer.find($(e.target)).length === 0) {\n          closeDropdown();\n        }\n\n      });\n\n\n      // Geolocation functions:\n      /**\n       *\n       * @param queryString\n       */\n      const getGeocodeResponse = function (queryString) {\n\n        // When user clicks \"Use my location\" link, it populates the input with\n        // \"Current location\" (if successful). Do not geocode this text.\n        if (queryString === currentLocationText) {\n          return;\n        }\n\n        if (!queryString) {\n          clearUserLocation();\n          return;\n        }\n\n        let apikey = GOOGLE_API_KEY;\n        if (window.location.host.indexOf('local') > 0) {\n          apikey = GOOGLE_API_KEY_TEMP;\n        }\n\n        $.ajax({\n          url: GOOGLE_GEOCODER_BASEURL,\n          dataType: \"json\",\n          type: \"GET\",\n          data: {\n            address: getCleanedKeywordSearch(),\n            bounds: GOOGLE_FILTER_BOUNDING_BOX,\n            components: GOOGLE_FILTER_COMPONENTS,\n            key: apikey\n          },\n          success(response) {\n            if (response.status === \"OK\") {\n              parseGeocodeResponse(response);\n            }\n            else {\n              handleGeocodeError();\n            }\n          },\n          error(xhr) {\n            handleGeocodeError();\n          },\n          complete(xhr) {\n\n            // If geocoding is happening, user has typed something, not clicked\n            // \"Use my location\". Regardless of success or error, close the\n            // dropdown to reset and ensure status message is visible.\n            closeDropdown();\n\n          }\n        });\n\n\n      };\n\n      /**\n       * Request user's location via browser.\n       */\n      const getNavigatorUserLocation = function () {\n\n        if (!navigator.geolocation) {\n\n          // TODO? Consider setting a distinct error message here for user.\n\n          handleGeocodeError();\n\n        }\n        else {\n          $addressInput.val(locationLoadingText);\n          $addressInput.prop('disabled', true);\n\n          // Per suggestion, set enableHighAccuracy to false, to increase\n          // likelihood that IE/Windows will allow it (re: privacy settings).\n          // @see https://stackoverflow.com/questions/43206442/geolocation-current-position-api-not-working-in-ie11-5-windows10\n          let options = {};\n\n          if (navigator.userAgent.indexOf('MSIE ') !== -1 || navigator.userAgent.indexOf('Trident/') !== -1) {\n            options.enableHighAccuracy = false;\n          }\n\n          navigator.geolocation.getCurrentPosition((position) => {\n\n            handleGeocodeSuccess(currentLocationText, position.coords.latitude, position.coords.longitude);\n            $(\"body\").addClass(\"search-with-current-location\");\n\n          }, (err) => {\n\n            // TODO? Consider setting a distinct error message here for user.\n            // `err.message` contains a human-readable message, e.g. \"This site\n            // does not have permissiont o use the Geolocation API.\"\n\n            handleGeocodeError();\n          }, options);\n        }\n\n      };\n\n      /**\n       * Extract latitude and longitude from geocode API response.\n       * @param apiResponse\n       * @return {*}\n       */\n      const parseGeocodeResponse = function (apiResponse) {\n\n        const isValid = true;\n\n        for (let i = 0; i < apiResponse.results.length; i++) {\n\n          const item = apiResponse.results[i];\n\n          // Do our match validation...\n          // The geocode API assumes an address was provided. Since we may have any\n          // search string, and parsing Google address component is brittle,\n          // let's just validate the user input is in the formatted result.\n          // const arr = USER_SEARCH_STRING.toLowerCase().split(' ');\n          // arr.forEach((pt) => {\n          //   if (item.formatted_address.toLowerCase().replace(' ', '').indexOf(pt) >= 0) {\n          //     isValid = true;\n          //   }\n          // });\n\n          // Save preferred result...\n          if (isValid && item && item.geometry && item.geometry.location) {\n\n            // handleGeocodeSuccess(item.formatted_address, item.geometry.location.lat, item.geometry.location.lng);\n            handleGeocodeSuccess(null, item.geometry.location.lat, item.geometry.location.lng);\n\n          }\n          else {\n            handleGeocodeError();\n          }\n\n        }\n\n      };\n\n      /**\n       * Update UI and form values upon successful lat/lng retrieval.\n       * @param updateInputText\n       * @param lat\n       * @param lng\n       * @return {*}\n       */\n      const handleGeocodeSuccess = function (updateInputText, lat, lng) {\n\n        clearUserLocation();\n\n        $addressInput.prop('disabled', false);\n\n        if (updateInputText) {\n          $addressInput.val(updateInputText);\n        }\n\n        if (lat && lng) {\n          $latlngHiddenInput.val(`${  lat  },${  lng  }`);\n          $(\"body\").addClass(\"search-with-geocoding\");\n        }\n      };\n\n      /**\n       * Update UI upon geocoding error.\n       * @return {*}\n       */\n      const handleGeocodeError = function () {\n\n        clearUserLocation();\n        setUserMessage('No matches found. Try again.');\n\n      };\n\n      /**\n       * Clear hidden lat/lng value and status message, and remove geocoding\n       * status CSS classes.\n       */\n      const clearUserLocation = function () {\n\n        if ($addressInput.val() === locationLoadingText) {\n          $addressInput.val('');\n        }\n        $addressInput.prop('disabled', false);\n\n        $latlngHiddenInput.val('');\n        $(\"body\").removeClass(\"search-with-geocoding\");\n        $(\"body\").removeClass(\"search-with-current-location\");\n        setUserMessage('');\n\n      };\n\n      /**\n       * Tweak user input text to be geocoded.\n       * @return {string}\n       */\n      const getCleanedKeywordSearch = function () {\n\n        let returnValue = $addressInput.val().trim();\n\n        // Get the JSON, UWM list of search and replace terms. These are keywords\n        // we can use, repacing what the user typed with something that matches\n        // better on the Google geocoding API.\n        const srt = (typeof uwdm_gtm_search_location_keywords_replacements === 'undefined' )\n          ? {} : uwdm_gtm_search_location_keywords_replacements;\n\n        if (srt && srt.length) {\n\n          srt.forEach((item) => {\n\n            if (item.search_keywords && item.replacement_keywords) {\n\n              const searchWord = item.search_keywords.toLowerCase();\n              if(returnValue.toLowerCase() === searchWord) {\n                returnValue = item.replacement_keywords;\n              }\n\n              // const arr = returnValue.toLowerCase().split(' ');\n              // arr.forEach((pt) => {\n              //\n              //   returnValue = returnValue.replace(search_value, replacement_value);\n              //\n              // });\n\n            }\n\n          });\n\n        }\n\n        return returnValue;\n\n      };\n\n      /**\n       * Update the status message below address input.\n       * @param message\n       */\n      const setUserMessage = function (message) {\n\n        $addressContainer.find('.status-message').text(message);\n\n      };\n\n    }\n\n  };\n\n})\n(jQuery, Drupal);\n"]}