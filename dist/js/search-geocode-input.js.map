{"version":3,"sources":["search-geocode-input.js"],"names":["$","Drupal","GOOGLE_API_KEY","GOOGLE_API_KEY_TEMP","GOOGLE_GEOCODER_BASEURL","GOOGLE_FILTER_BOUNDING_BOX","GOOGLE_FILTER_COMPONENTS","USER_SEARCH_STRING","behaviors","uwmGeocodeInputInit","attach","context","settings","document","ready","$input","getGeocodeInput","keypress","val","getGeocodeResponse","$container","find","length","append","queryString","apikey","window","location","host","indexOf","ajax","url","dataType","type","data","address","bounds","components","key","success","response","status","parseGeocodeResponse","handleGeocodeError","error","xhr","setUserMessage","apiResponse","isValid","i","results","item","geometry","handleGeocodeSuccess","formatted_address","lat","lng","long","removeClass","addClass","message","text","jQuery"],"mappings":"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","file":"search-geocode-input.js","sourcesContent":["/**\n *\n * Script to take the address a user has typed in our location search form,\n * and to query Google's Geocode API for the best possible location match. We\n * then use the latitude/ longitude for a Drupal locations search.\n *\n */\n(function ($, Drupal) {\n\n  /**\n   * Provide API key for requests.\n   * @see https://console.cloud.google.com/home/dashboard?project=uw-medicine\n   * @type {string}\n   */\n  const GOOGLE_API_KEY = 'AIzaSyDyy0tzNE5Pvxx-hWO_SIgb-guPGWOo2vo';\n\n  /**\n   * Provide API key without hostname restrictions.\n   * @see https://console.cloud.google.com/home/dashboard?project=uw-medicine\n   * @type {string}\n   */\n  const GOOGLE_API_KEY_TEMP = 'AIzaSyB6ziIhPThPpqSPKLeJKs1wnblBXQbbxe4';\n  /**\n   * Provide base url for our geocode, Google.\n   * @see https://developers.google.com/maps/documentation/geocoding/start\n   * @type {string}\n   */\n  const GOOGLE_GEOCODER_BASEURL = 'https://maps.googleapis.com/maps/api/geocode/json?';\n\n  /**\n   * Preferred bounding box for results.\n   * @see https://developers.google.com/maps/documentation/geocoding/intro#Viewports\n   * @type {string}\n   */\n  const GOOGLE_FILTER_BOUNDING_BOX = '46.709241,-123.422571|48.254976,-119.381319';\n\n  /**\n   * Limit results to these criteria.\n   * @see https://developers.google.com/maps/documentation/geocoding/intro#ComponentFiltering\n   * @type {string}\n   */\n    //const GOOGLE_FILTER_COMPONENTS = 'administrative_area_level_1:WA|country:US';\n  const GOOGLE_FILTER_COMPONENTS = '';\n\n  /**\n   *\n   * @type {string}\n   */\n  let USER_SEARCH_STRING = '';\n\n  /**\n   * Attach behaviors once Drupal readies page.\n   * @type {{attach(*, *): void}}\n   */\n  Drupal.behaviors.uwmGeocodeInputInit = {\n\n    attach(context, settings) {\n\n      $(document).ready(() => {\n\n        const $input = getGeocodeInput();\n        $input.keypress(e => {\n          //if (e.which === 13) {\n          USER_SEARCH_STRING = $input.val();\n          getGeocodeResponse();\n          // }\n        });\n      });\n\n    }\n\n  };\n\n\n  /**\n   *\n   * @return {*|HTMLElement}\n   */\n  const getGeocodeInput = function () {\n\n    const $container = $('section.content-topper');\n    if (!$container.find('form input[name=l]').length) {\n\n      const $input = $('<input name=\"l\">');\n      $container.append($input);\n\n    }\n\n    return $container.find('input[name=l]');\n  };\n\n  /**\n   *\n   * @param queryString\n   */\n  const getGeocodeResponse = function (queryString) {\n\n    let apikey = GOOGLE_API_KEY;\n    if (window.location.host.indexOf('local') > 0) {\n      apikey = GOOGLE_API_KEY_TEMP;\n    }\n\n    $.ajax({\n      url: GOOGLE_GEOCODER_BASEURL,\n      dataType: \"json\",\n      type: \"GET\",\n      data: {\n        address: USER_SEARCH_STRING,\n        bounds: GOOGLE_FILTER_BOUNDING_BOX,\n        components: GOOGLE_FILTER_COMPONENTS,\n        key: apikey\n      },\n      success(response) {\n        if (response.status === \"OK\") {\n          parseGeocodeResponse(response);\n        }\n        else {\n          handleGeocodeError();\n        }\n      },\n      error(xhr) {\n        handleGeocodeError();\n      }\n    });\n\n    setUserMessage(`Searching for ${  USER_SEARCH_STRING  }...`);\n\n  };\n\n  /**\n   *\n   * @param apiResponse\n   * @return {*}\n   */\n  const parseGeocodeResponse = function (apiResponse) {\n\n    let isValid = true;\n\n    for (let i = 0; i < apiResponse.results.length; i++) {\n\n      const item = apiResponse.results[i];\n\n      // Do our match validation...\n      // The geocode API assumes an address was provided. Since we may have any\n      // search string, and parsing Google address component is brittle,\n      // let's just validate the user input is in the formatted result.\n      // const arr = USER_SEARCH_STRING.toLowerCase().split(' ');\n      // arr.forEach((pt) => {\n      //   if (item.formatted_address.toLowerCase().replace(' ', '').indexOf(pt) >= 0) {\n      //     isValid = true;\n      //   }\n      // });\n\n      // Save preferred result...\n      if (isValid && item && item.geometry && item.geometry.location) {\n\n        handleGeocodeSuccess(item.formatted_address, item.geometry.location.lat, item.geometry.location.lng);\n\n      }\n      else {\n        handleGeocodeError();\n      }\n\n    }\n\n  };\n\n  /**\n   *\n   * @param apiResponse\n   * @return {*}\n   */\n  const handleGeocodeSuccess = function (address, lat, long) {\n\n    $(\"body\").removeClass(\"search-geocode-fail\").addClass(\"search-geocode-success\");\n\n    $('input[name=uml]').val('');\n    if (lat && lng) {\n      $('input[name=uml]').val(`${ lat },${ lng }`);\n    }\n\n  };\n\n\n  /**\n   *\n   * @param apiResponse\n   * @return {*}\n   */\n  const handleGeocodeError = function () {\n\n    $('input[name=uml]').val('');\n    $(\"body\").removeClass(\"search-geocode-fail\").addClass(\"search-geocode-success\");\n\n  };\n\n  /**\n   *\n   * @param message\n   */\n  const setUserMessage = function (message) {\n\n    const $container = $('.content-topper .filter-tips');\n    $container.text(message);\n\n  };\n\n\n\n})\n(jQuery, Drupal);\n"]}