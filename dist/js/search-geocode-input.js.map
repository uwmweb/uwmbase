{"version":3,"sources":["search-geocode-input.js"],"names":["$","Drupal","GOOGLE_API_KEY","GOOGLE_API_KEY_TEMP","GOOGLE_GEOCODER_BASEURL","GOOGLE_FILTER_BOUNDING_BOX","GOOGLE_FILTER_COMPONENTS","$form","behaviors","uwmGeocodeInputInit","attach","context","settings","document","ready","$addressContainer","find","$addressInput","$currentLocationDropdown","length","val","addClass","on","removeClass","e","relatedTarget","id","getGeocodeResponse","preventDefault","getNavigatorUserLocation","queryString","clearUserLocation","apikey","window","location","host","indexOf","ajax","url","dataType","type","data","address","getCleanedKeywordSearch","bounds","components","key","success","response","status","parseGeocodeResponse","handleGeocodeError","error","xhr","handleGeocodeSuccess","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","ShowLocation","map","apiResponse","isValid","i","results","item","geometry","lat","lng","setUserMessage","returnValue","trim","srt","uwdm_gtm_search_location_keywords_replacements","forEach","search_keywords","replacement_keywords","searchWord","toLowerCase","message","text","jQuery"],"mappings":"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","file":"search-geocode-input.js","sourcesContent":["// Sample JSON for Google Tag Manager and hook to\n// replace a user's search term with the terms we provide:\n//\n// const uwdm_gtm_search_location_keywords_replacements = [\n//   {\n//     \"search_keywords\": \"Ravenna\",\n//     \"replacement_keywords\": \"Ravenna, Seattle, WA\",\n//     \"match_full_text_only\": \"TRUE\"\n//   }, {\n//     \"search_keywords\": \"Ballard\",\n//     \"replacement_keywords\": \"Ballard, Seattle, WA\",\n//     \"match_full_text_only\": \"TRUE\"\n//   }\n// ];\n\n\n/**\n *\n * Script to take the address a user has typed in our location search form,\n * and to query Google's Geocode API for the best possible location match. We\n * then use the latitude/ longitude for a Drupal locations search.\n *\n */\n(function ($, Drupal) {\n\n  /**\n   * Provide API key for requests.\n   * @see https://console.cloud.google.com/home/dashboard?project=uw-medicine\n   * @type {string}\n   */\n  const GOOGLE_API_KEY = 'AIzaSyDyy0tzNE5Pvxx-hWO_SIgb-guPGWOo2vo';\n\n  /**\n   * Provide API key without hostname restrictions.\n   * @see https://console.cloud.google.com/home/dashboard?project=uw-medicine\n   * @type {string}\n   */\n  const GOOGLE_API_KEY_TEMP = 'AIzaSyB6ziIhPThPpqSPKLeJKs1wnblBXQbbxe4';\n  /**\n   * Provide base url for our geocode, Google.\n   * @see https://developers.google.com/maps/documentation/geocoding/start\n   * @type {string}\n   */\n  const GOOGLE_GEOCODER_BASEURL = 'https://maps.googleapis.com/maps/api/geocode/json?';\n\n  /**\n   * Preferred bounding box for results.\n   * @see https://developers.google.com/maps/documentation/geocoding/intro#Viewports\n   * @type {string}\n   */\n  const GOOGLE_FILTER_BOUNDING_BOX = '46.709241,-123.422571|48.254976,-119.381319';\n\n  /**\n   * Limit results to these criteria.\n   * @see https://developers.google.com/maps/documentation/geocoding/intro#ComponentFiltering\n   * @type {string}\n   */\n    // const GOOGLE_FILTER_COMPONENTS = 'administrative_area_level_1:WA|country:US';\n  const GOOGLE_FILTER_COMPONENTS = '';\n\n  /**\n   *\n   * @type {*|HTMLElement}\n   */\n  let $form = $();\n\n  /**\n   * Attach behaviors once Drupal readies page.\n   * @type {{attach(*, *): void}}\n   */\n  Drupal.behaviors.uwmGeocodeInputInit = {\n\n    attach(context, settings) {\n\n      $(document).ready(() => {\n\n        $form = $('section.content-topper form');\n        const $addressContainer = $form.find('.location-address-keywords');\n        const $addressInput = $addressContainer.find('input[name=l]');\n        const $currentLocationDropdown = $addressContainer.find('.field-suffix .dropdown');\n\n        // Set state on load:\n        if ($form.find('input[name=uml]').length && $form.find('input[name=uml]').val().length > 0) {\n          $(\"body\").addClass(\"search-with-geocoding\");\n        }\n\n        // Handle address focus:\n        $addressInput.on('focus', e => {\n          $addressContainer.addClass('active');\n          $currentLocationDropdown.addClass('uwm-display-dropdown');\n        });\n\n        // Handle address blur:\n        $addressInput.on('blur', e => {\n          $addressContainer.removeClass('active');\n          // if the element that caused this field to blur was the use my location link,\n          // then let the click handler remove the class to ensure the click handler\n          // fires while the element is still visible\n          if(!(e.relatedTarget && e.relatedTarget.id === \"umlDropdownLink\")) {\n            $currentLocationDropdown.removeClass('uwm-display-dropdown');\n          }\n          \n          getGeocodeResponse($addressInput.val());\n\n        });\n\n        $addressContainer.find('.dropdown a').on('click', e => {\n          e.preventDefault();\n          $currentLocationDropdown.removeClass('uwm-display-dropdown');\n          getNavigatorUserLocation();\n        });\n\n        // $form.find('.location-address-keywords').on('show.bs.dropdown', () => {\n        // });\n\n\n\n      });\n\n    }\n\n  };\n\n  /**\n   *\n   * @param queryString\n   */\n  const getGeocodeResponse = function (queryString) {\n\n    if (!queryString) {\n      clearUserLocation();\n      return;\n    }\n\n    let apikey = GOOGLE_API_KEY;\n    if (window.location.host.indexOf('local') > 0) {\n      apikey = GOOGLE_API_KEY_TEMP;\n    }\n\n    $.ajax({\n      url: GOOGLE_GEOCODER_BASEURL,\n      dataType: \"json\",\n      type: \"GET\",\n      data: {\n        address: getCleanedKeywordSearch(),\n        bounds: GOOGLE_FILTER_BOUNDING_BOX,\n        components: GOOGLE_FILTER_COMPONENTS,\n        key: apikey\n      },\n      success(response) {\n        if (response.status === \"OK\") {\n          parseGeocodeResponse(response);\n        }\n        else {\n          handleGeocodeError();\n        }\n      },\n      error(xhr) {\n        handleGeocodeError();\n      }\n    });\n\n\n  };\n\n  const getNavigatorUserLocation = function () {\n\n    handleGeocodeSuccess('Current location');\n    if (!navigator.geolocation) {\n      handleGeocodeError();\n    }\n    else {\n      navigator.geolocation.getCurrentPosition((position) => {\n\n        handleGeocodeSuccess('Current location', position.coords.latitude, position.coords.longitude);\n        $(\"body\").addClass(\"search-with-current-location\");\n        this.ShowLocation(position, this.map);\n\n      }, () => {\n        handleGeocodeError();\n      });\n    }\n\n  };\n\n  /**\n   *\n   * @param apiResponse\n   * @return {*}\n   */\n  const parseGeocodeResponse = function (apiResponse) {\n\n    const isValid = true;\n\n    for (let i = 0; i < apiResponse.results.length; i++) {\n\n      const item = apiResponse.results[i];\n\n      // Do our match validation...\n      // The geocode API assumes an address was provided. Since we may have any\n      // search string, and parsing Google address component is brittle,\n      // let's just validate the user input is in the formatted result.\n      // const arr = USER_SEARCH_STRING.toLowerCase().split(' ');\n      // arr.forEach((pt) => {\n      //   if (item.formatted_address.toLowerCase().replace(' ', '').indexOf(pt) >= 0) {\n      //     isValid = true;\n      //   }\n      // });\n\n      // Save preferred result...\n      if (isValid && item && item.geometry && item.geometry.location) {\n\n        // handleGeocodeSuccess(item.formatted_address, item.geometry.location.lat, item.geometry.location.lng);\n        handleGeocodeSuccess($form.find('input[name=l]').val(), item.geometry.location.lat, item.geometry.location.lng);\n\n      }\n      else {\n        handleGeocodeError();\n      }\n\n    }\n\n  };\n\n  /**\n   *\n   * @param apiResponse\n   * @return {*}\n   */\n  const handleGeocodeSuccess = function (address, lat, lng) {\n\n    clearUserLocation();\n\n    $(\"body\").addClass(\"search-with-geocoding\");\n\n    $('input[name=l]').val(address);\n    if (lat && lng) {\n      $('input[name=uml]').val(`${  lat  },${  lng  }`);\n    }\n  };\n\n\n  /**\n   *\n   * @param apiResponse\n   * @return {*}\n   */\n  const handleGeocodeError = function () {\n\n    clearUserLocation();\n\n    $('input[name=uml]').val('');\n    $(\"body\").removeClass(\"search-with-geocoding\");\n    $(\"body\").removeClass(\"search-with-current-location\");\n    setUserMessage('No matches found. Try again.');\n  };\n\n  /**\n   *\n   * @param message\n   */\n  const clearUserLocation = function () {\n\n    $('input[name=uml]').val('');\n    $(\"body\").removeClass(\"search-with-geocoding\");\n    $(\"body\").removeClass(\"search-with-current-location\");\n    setUserMessage('');\n\n  };\n\n  /**\n   *\n   * @return {string}\n   */\n  const getCleanedKeywordSearch = function () {\n\n    let returnValue = $form.find('input[name=l]').val().trim();\n\n    // Get the JSON, UWM list of search and replace terms. These are keywords\n    // we can use, repacing what the user typed with something that matches\n    // better on the Google geocoding API.\n    const srt = (typeof uwdm_gtm_search_location_keywords_replacements === 'undefined' )\n      ? {} : uwdm_gtm_search_location_keywords_replacements;\n\n    if (srt && srt.length) {\n\n      srt.forEach((item) => {\n\n        if (item.search_keywords && item.replacement_keywords) {\n\n          const searchWord = item.search_keywords.toLowerCase();\n          if(returnValue.toLowerCase() === searchWord) {\n            returnValue = item.replacement_keywords;\n          }\n\n          // const arr = returnValue.toLowerCase().split(' ');\n          // arr.forEach((pt) => {\n          //\n          //   returnValue = returnValue.replace(search_value, replacement_value);\n          //\n          // });\n\n        }\n\n      });\n\n    }\n\n    return returnValue;\n\n  };\n\n  /**\n   *\n   * @param message\n   */\n  const setUserMessage = function (message) {\n\n    const $form = $('.content-topper .status-message');\n    $form.text(message);\n\n  };\n\n})\n(jQuery, Drupal);\n"]}