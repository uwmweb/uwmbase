{"version":3,"sources":["search-geocode-input.js"],"names":["$","Drupal","GOOGLE_API_KEY","GOOGLE_API_KEY_TEMP","GOOGLE_GEOCODER_BASEURL","GOOGLE_FILTER_BOUNDING_BOX","GOOGLE_FILTER_COMPONENTS","$form","behaviors","uwmGeocodeInputInit","attach","context","settings","length","$addressContainer","find","$addressInput","$currentLocationDropdown","$currentLocationDropdownMenu","$currentLocationDropdownToggle","val","addClass","on","e","preventDefault","focus","is","attr","relatedTarget","id","removeClass","getGeocodeResponse","getNavigatorUserLocation","queryString","clearUserLocation","apikey","window","location","host","indexOf","ajax","url","dataType","type","data","address","getCleanedKeywordSearch","bounds","components","key","success","response","status","parseGeocodeResponse","handleGeocodeError","error","xhr","handleGeocodeSuccess","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","ShowLocation","map","apiResponse","isValid","i","results","item","geometry","lat","lng","updateInputText","setUserMessage","returnValue","trim","srt","uwdm_gtm_search_location_keywords_replacements","forEach","search_keywords","replacement_keywords","searchWord","toLowerCase","message","text","jQuery"],"mappings":"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","file":"search-geocode-input.js","sourcesContent":["// Sample JSON for Google Tag Manager and hook to\n// replace a user's search term with the terms we provide:\n//\n// const uwdm_gtm_search_location_keywords_replacements = [\n//   {\n//     \"search_keywords\": \"Ravenna\",\n//     \"replacement_keywords\": \"Ravenna, Seattle, WA\",\n//     \"match_full_text_only\": \"TRUE\"\n//   }, {\n//     \"search_keywords\": \"Ballard\",\n//     \"replacement_keywords\": \"Ballard, Seattle, WA\",\n//     \"match_full_text_only\": \"TRUE\"\n//   }\n// ];\n\n\n/**\n *\n * Script to take the address a user has typed in our location search form,\n * and to query Google's Geocode API for the best possible location match. We\n * then use the latitude/ longitude for a Drupal locations search.\n *\n */\n(function ($, Drupal) {\n\n  /**\n   * Provide API key for requests.\n   * @see https://console.cloud.google.com/home/dashboard?project=uw-medicine\n   * @type {string}\n   */\n  const GOOGLE_API_KEY = 'AIzaSyDyy0tzNE5Pvxx-hWO_SIgb-guPGWOo2vo';\n\n  /**\n   * Provide API key without hostname restrictions.\n   * @see https://console.cloud.google.com/home/dashboard?project=uw-medicine\n   * @type {string}\n   */\n  const GOOGLE_API_KEY_TEMP = 'AIzaSyB6ziIhPThPpqSPKLeJKs1wnblBXQbbxe4';\n  /**\n   * Provide base url for our geocode, Google.\n   * @see https://developers.google.com/maps/documentation/geocoding/start\n   * @type {string}\n   */\n  const GOOGLE_GEOCODER_BASEURL = 'https://maps.googleapis.com/maps/api/geocode/json?';\n\n  /**\n   * Preferred bounding box for results.\n   * @see https://developers.google.com/maps/documentation/geocoding/intro#Viewports\n   * @type {string}\n   */\n  const GOOGLE_FILTER_BOUNDING_BOX = '46.709241,-123.422571|48.254976,-119.381319';\n\n  /**\n   * Limit results to these criteria.\n   * @see https://developers.google.com/maps/documentation/geocoding/intro#ComponentFiltering\n   * @type {string}\n   */\n    // const GOOGLE_FILTER_COMPONENTS = 'administrative_area_level_1:WA|country:US';\n  const GOOGLE_FILTER_COMPONENTS = '';\n\n  /**\n   *\n   * @type {*|HTMLElement}\n   */\n  let $form = $();\n\n  /**\n   * Attach behaviors once Drupal readies page.\n   * @type {{attach(*, *): void}}\n   */\n  Drupal.behaviors.uwmGeocodeInputInit = {\n\n    attach(context, settings) {\n\n      $form = $('section.content-topper form', context);\n\n      if (!$form.length) {\n        return;\n      }\n\n      const $addressContainer = $form.find('.location-address-keywords');\n      const $addressInput = $addressContainer.find('input[name=l]');\n      const $currentLocationDropdown = $addressContainer.find('.field-suffix .dropdown');\n      const $currentLocationDropdownMenu = $addressContainer.find('.field-suffix .dropdown-menu');\n      const $currentLocationDropdownToggle = $addressContainer.find('.field-suffix .toggle-uml-dropdown');\n\n      // Set state on load:\n      if ($form.find('input[name=uml]').length && $form.find('input[name=uml]').val().length > 0) {\n        $(\"body\").addClass(\"search-with-geocoding\");\n      }\n\n      // Handle current-location icon click:\n      $currentLocationDropdownToggle.on('click', e => {\n        e.preventDefault();\n\n        // Focus the address input; that handler opens the dropdown.\n        $addressInput.focus();\n      });\n\n      // Handle address input focus:\n      $addressInput.on('focus', e => {\n        if ($currentLocationDropdownMenu.is(':hidden')) {\n          $currentLocationDropdown.addClass('uwm-display-dropdown');\n          $addressContainer.addClass('active');\n          $currentLocationDropdownToggle.attr('aria-expanded', 'true');\n        }\n      });\n\n      // Handle address input blur:\n      $addressInput.on('blur', e => {\n\n        // Do not hide dropdown if the element that caused this to blur was:\n        // a) the use my location link - ensure the click handler fires while\n        //    the element is still visible; it will hide the dropdown.\n        //    (TODO: This is not good for accessibility - keyboard navigation\n        //    causes blur on the field without clicking this link, leaving\n        //    dropdown open.)\n        // b) the current location icon - it focuses this field anyway, so we\n        //    don't want it to blur and re-focus, causing the dropdown to\n        //    close and re-open.\n        if (e.relatedTarget && (e.relatedTarget.id === \"umlDropdownLink\" || $(e.relatedTarget).is($currentLocationDropdownToggle))) {\n          return;\n        }\n\n        if ($currentLocationDropdownMenu.is(':visible')) {\n          $currentLocationDropdown.removeClass('uwm-display-dropdown');\n          $addressContainer.removeClass('active');\n          $currentLocationDropdownToggle.attr('aria-expanded', 'false');\n        }\n\n        getGeocodeResponse($addressInput.val());\n      });\n\n      // Handle Use-my-location dropdown link click:\n      $addressContainer.find('.dropdown a').on('click', e => {\n        e.preventDefault();\n\n        $currentLocationDropdown.removeClass('uwm-display-dropdown');\n        $addressContainer.removeClass('active');\n        $currentLocationDropdownToggle.attr('aria-expanded', 'false');\n\n        getNavigatorUserLocation();\n      });\n\n    }\n\n  };\n\n  /**\n   *\n   * @param queryString\n   */\n  const getGeocodeResponse = function (queryString) {\n\n    if (!queryString) {\n      clearUserLocation();\n      return;\n    }\n\n    let apikey = GOOGLE_API_KEY;\n    if (window.location.host.indexOf('local') > 0) {\n      apikey = GOOGLE_API_KEY_TEMP;\n    }\n\n    $.ajax({\n      url: GOOGLE_GEOCODER_BASEURL,\n      dataType: \"json\",\n      type: \"GET\",\n      data: {\n        address: getCleanedKeywordSearch(),\n        bounds: GOOGLE_FILTER_BOUNDING_BOX,\n        components: GOOGLE_FILTER_COMPONENTS,\n        key: apikey\n      },\n      success(response) {\n        if (response.status === \"OK\") {\n          parseGeocodeResponse(response);\n        }\n        else {\n          handleGeocodeError();\n        }\n      },\n      error(xhr) {\n        handleGeocodeError();\n      }\n    });\n\n\n  };\n\n  const getNavigatorUserLocation = function () {\n\n    handleGeocodeSuccess('Current location');\n    if (!navigator.geolocation) {\n      handleGeocodeError();\n    }\n    else {\n      navigator.geolocation.getCurrentPosition((position) => {\n\n        handleGeocodeSuccess('Current location', position.coords.latitude, position.coords.longitude);\n        $(\"body\").addClass(\"search-with-current-location\");\n        this.ShowLocation(position, this.map);\n\n      }, () => {\n        handleGeocodeError();\n      });\n    }\n\n  };\n\n  /**\n   *\n   * @param apiResponse\n   * @return {*}\n   */\n  const parseGeocodeResponse = function (apiResponse) {\n\n    const isValid = true;\n\n    for (let i = 0; i < apiResponse.results.length; i++) {\n\n      const item = apiResponse.results[i];\n\n      // Do our match validation...\n      // The geocode API assumes an address was provided. Since we may have any\n      // search string, and parsing Google address component is brittle,\n      // let's just validate the user input is in the formatted result.\n      // const arr = USER_SEARCH_STRING.toLowerCase().split(' ');\n      // arr.forEach((pt) => {\n      //   if (item.formatted_address.toLowerCase().replace(' ', '').indexOf(pt) >= 0) {\n      //     isValid = true;\n      //   }\n      // });\n\n      // Save preferred result...\n      if (isValid && item && item.geometry && item.geometry.location) {\n\n        // handleGeocodeSuccess(item.formatted_address, item.geometry.location.lat, item.geometry.location.lng);\n        handleGeocodeSuccess(null, item.geometry.location.lat, item.geometry.location.lng);\n\n      }\n      else {\n        handleGeocodeError();\n      }\n\n    }\n\n  };\n\n  /**\n   *\n   * @param apiResponse\n   * @return {*}\n   */\n  const handleGeocodeSuccess = function (updateInputText, lat, lng) {\n\n    clearUserLocation();\n\n    $(\"body\").addClass(\"search-with-geocoding\");\n\n    if (updateInputText) {\n      $('input[name=l]').val(updateInputText);\n    }\n\n    if (lat && lng) {\n      $('input[name=uml]').val(`${  lat  },${  lng  }`);\n    }\n  };\n\n\n  /**\n   *\n   * @param apiResponse\n   * @return {*}\n   */\n  const handleGeocodeError = function () {\n\n    clearUserLocation();\n\n    $('input[name=uml]').val('');\n    $(\"body\").removeClass(\"search-with-geocoding\");\n    $(\"body\").removeClass(\"search-with-current-location\");\n    setUserMessage('No matches found. Try again.');\n  };\n\n  /**\n   *\n   * @param message\n   */\n  const clearUserLocation = function () {\n\n    $('input[name=uml]').val('');\n    $(\"body\").removeClass(\"search-with-geocoding\");\n    $(\"body\").removeClass(\"search-with-current-location\");\n    setUserMessage('');\n\n  };\n\n  /**\n   *\n   * @return {string}\n   */\n  const getCleanedKeywordSearch = function () {\n\n    let returnValue = $('input[name=l]').val().trim();\n\n    // Get the JSON, UWM list of search and replace terms. These are keywords\n    // we can use, repacing what the user typed with something that matches\n    // better on the Google geocoding API.\n    const srt = (typeof uwdm_gtm_search_location_keywords_replacements === 'undefined' )\n      ? {} : uwdm_gtm_search_location_keywords_replacements;\n\n    if (srt && srt.length) {\n\n      srt.forEach((item) => {\n\n        if (item.search_keywords && item.replacement_keywords) {\n\n          const searchWord = item.search_keywords.toLowerCase();\n          if(returnValue.toLowerCase() === searchWord) {\n            returnValue = item.replacement_keywords;\n          }\n\n          // const arr = returnValue.toLowerCase().split(' ');\n          // arr.forEach((pt) => {\n          //\n          //   returnValue = returnValue.replace(search_value, replacement_value);\n          //\n          // });\n\n        }\n\n      });\n\n    }\n\n    return returnValue;\n\n  };\n\n  /**\n   *\n   * @param message\n   */\n  const setUserMessage = function (message) {\n\n    const $form = $('.content-topper .status-message');\n    $form.text(message);\n\n  };\n\n})\n(jQuery, Drupal);\n"]}