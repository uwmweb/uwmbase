{"version":3,"sources":["featured-story/featured-story.scss","../node_modules/angled-edges/_angled-edges.scss","../node_modules/bootstrap/scss/mixins/_breakpoints.scss","../src/scss/init/colors/_colors.scss","featured-story/featured-story.css"],"names":[],"mappings":"AAEA;EACI,mBAAkB;CACrB;;AAED;;EC2EC,mBAAkB;CDnEhB;;AARH;;EC4CC,gPAA6B;EAC7B,mCAAkC;EAClC,6BAA4B;EAI3B,2BAA0B;EAG3B,YAAW;EACX,aAAqB;EACrB,QAAO;EACP,mBAAkB;EAClB,SAAQ;EACR,YAAW;EACX,WAAU;EA+DR,UAAS;CACT;;AD3HH;;EAKM,YAAW;EACX,oBAAmB;CACpB;;AAGL;EACE,UAAS;CACV;;AAED;EAEI,cAAa;CACd;;AAGH;EACE,kBAAiB;EACjB,YAAW;EAEX,0BAAyB;EACzB,+BAA0C;EAC1C,aAAY;EACZ,sBAAqB;EACrB,mBAAkB;EAClB,gBAAe;EACf,iBAAgB;EAChB,cAAa;EAEb,mBAAkB;EAClB,SAAQ;CAOT;;AEaG;EFlCJ;IAiBI,iBAAgB;IAChB,kBAAiB;IACjB,eGqCmB;GHnCtB;CIaA;;AJXD;EACE,qBAAoB;EACpB,cAAa;EACb,iBAAgB;CASjB;;AEDG;EFXJ;IAMI,2CAAyC;IACzC,mBAAkB;IAClB,mBAAkB;IAClB,oBAAmB;IACnB,UAAS;GAEZ;CIeA;;AJbD;EACE,oDAAwC;UAAxC,4CAAwC;CACzC;;AAED;EACE,eGnBe;CHoBhB;;AAED;EACE,eGtBoB;CHuBrB;;AAED;EACE,eGtBe;CHuBhB;;AAED;EACE,eGjCe;CHkChB;;AAED;EACE,eG/Be;CHgChB;;AAED;EACE,eGhCe;CHiChB","file":"featured-story.css","sourcesContent":["@import 'init';\n\n.uwm-featured-story {\n    position: relative;\n}\n\n.uwm-featured-story__background,\n.uwm-bottom-border__angled .uwm-featured-story__background {\n  @include angled-edge('inside bottom', 'upper right', #fff, 50);\n\n    &::after {\n      width: 100%;\n      margin-bottom: -1px;\n    }\n  }\n\n.uwm-featured-story__background .img-fluid {\n  margin: 0;\n}\n\n.uwm-bottom-border__straight .uwm-featured-story__background {\n  &::after {\n    content: none;\n  }\n}\n\n.uwm-featured-story__title {\n  padding-top: 38px;\n  width: 100%;\n\n  text-transform: uppercase;\n  text-shadow: 0px 3px 6px rgba(0, 0, 0, 53);\n  color: white;\n  letter-spacing: .05em;\n  margin-bottom: 6px;\n  font-size: 14px;\n  font-weight: 500;\n  margin-top: 0;\n\n  position: absolute;\n  top: 0px;\n\n  @include media-breakpoint-up('lg') {\n    position: static;\n    text-shadow: none;\n    color: theme-color('text');\n  }\n}\n\n.uwm-featured-story__content {\n  padding-bottom: 38px;\n  margin-top: 0;\n  position: static;\n\n  @include media-breakpoint-up('lg') {\n    background-color: rgba(255, 255, 255, .9);\n    position: absolute;\n    padding-left: 38px;\n    padding-right: 38px;\n    top: 30px;\n  }\n}\n\n.uwm-featured-story__content-shadow {\n  box-shadow: 0 3px 6px 0 rgba(0,0,0,0.15)\n}\n\n.uwm-accent-color__purple .uwm-featured-story__heading {\n  color: color('purple');\n}\n\n.uwm-accent-color__light-purple .uwm-featured-story__heading {\n  color: color('light-purple');\n}\n\n.uwm-accent-color__yellow .uwm-featured-story__heading {\n  color: color('yellow');\n}\n\n.uwm-accent-color__blue .uwm-featured-story__heading {\n  color: color('blue');\n}\n\n.uwm-accent-color__orange .uwm-featured-story__heading {\n  color: color('orange');\n}\n\n.uwm-accent-color__teal .uwm-featured-story__heading {\n  color: color('teal');\n}","//-------------------------------------------------------------------------------------\n// Angled Edges v2.0.0 (https://github.com/josephfusco/angled-edges)\n// Copyright 2017 Joseph Fusco\n// Licensed under MIT (https://github.com/josephfusco/angled-edges/blob/master/LICENSE)\n//-------------------------------------------------------------------------------------\n\n/// Replace `$search` with `$replace` in `$string`.\n///\n/// @author Hugo Giraudel\n/// @link   http://www.sassmeister.com/gist/1b4f2da5527830088e4d\n///\n/// @param  {String}  $string - Initial string\n/// @param  {String}  $search - Substring to replace\n/// @param  {String}  $replace ('') - New value\n/// @return {String}  Updated string\n///\n@function ae-str-replace($string, $search, $replace: '') {\n\t$index: str-index($string, $search);\n\n\t@if $index {\n\t\t@return str-slice($string, 1, $index - 1) + $replace + ae-str-replace(str-slice($string, $index + str-length($search)), $search, $replace);\n\t}\n\n\t@return $string;\n}\n\n/// Encode SVG to use as background.\n///\n/// @param  {String}  $string\n/// @return {String}  Encoded svg data\n///\n@function ae-svg-encode($string){\n\t$result: ae-str-replace($string, '<svg', '<svg xmlns=\"http://www.w3.org/2000/svg\"');\n\t$result: ae-str-replace($result, '%', '%25');\n\t$result: ae-str-replace($result, '\"', '\\'');\n\t$result: ae-str-replace($result, '<', '%3C');\n\t$result: ae-str-replace($result, '>', '%3E');\n\n\t@return 'data:image/svg+xml,' + $result;\n}\n\n/// Outputs pseudo content for main mixin.\n///\n/// @author Joseph Fusco\n///\n/// @param  {String}  $location\n/// @param  {Number}  $height\n/// @output psuedo content\n///\n@mixin ae-pseudo($wedge, $height, $width) {\n\tbackground-image: url($wedge);\n\tbackground-position: center center;\n\tbackground-repeat: no-repeat;\n\n\t// full width wedge - needed as Firefox ignores preserveAspectRatio=\"none\" in this case\n\t@if ($width == null) {\n\t\tbackground-size: 100% 100%;\n\t}\n\n\tcontent: '';\n\theight: $height * 1px;\n\tleft: 0;\n\tposition: absolute;\n\tright: 0;\n\twidth: 100%;\n\tz-index: 1;\n}\n\n/// Attatches an svg wedge shape to an element.\n///\n/// @author Joseph Fusco\n///\n/// @param  {String}  $location   - 'inside top', 'outside top', 'inside bottom', 'outside bottom'\n/// @param  {String}  $hypotenuse - 'upper left', 'upper right', 'lower left', 'lower right'\n/// @param  {Color}   $fill\n/// @param  {Number}  $height\n/// @param  {Number}  $width\n/// @output '::before' and/or '::after' with svg background image\n///\n@mixin angled-edge($location, $hypotenuse, $fill, $height: 100, $width: null) {\n\n\tposition: relative;\n\n\t$points: (\n\t\t'upper left': '0,#{$height} #{$width},#{$height} #{$width},0',\n\t\t'upper right': '0,#{$height} #{$width},#{$height} 0,0',\n\t\t'lower left': '0,0 #{$width},#{$height} #{$width},0',\n\t\t'lower right': '0,0 #{$width},0 0,#{$height}'\n\t);\n\n\t// full width wedge\n\t@if ($width == null) {\n\t\t$points: (\n\t\t\t'upper left': '0,#{$height} 100,#{$height} 100,0',\n\t\t\t'upper right': '0,#{$height} 100,#{$height} 0,0',\n\t\t\t'lower left': '0,0 100,#{$height} 100,0',\n\t\t\t'lower right': '0,0 100,0 0,#{$height}'\n\t\t);\n\t}\n\n\t// ensure $fill color is using rgb()\n\t$fill-rgb: 'rgb(' + round(red($fill)) + ',' + round(green($fill)) + ',' + round(blue($fill)) + ')';\n\n\t// capture alpha component of $fill to use with fill-opacity\n\t$fill-alpha: alpha($fill);\n\n\t$wedge: '<svg width=\"#{$width}\" height=\"#{$height}\" fill=\"#{$fill-rgb}\" fill-opacity=\"#{$fill-alpha}\"><polygon points=\"#{map-get($points, $hypotenuse)}\"></polygon></svg>';\n\n\t// full width wedge\n\t@if ($width == null) {\n\t\t$wedge: '<svg preserveAspectRatio=\"none\" viewBox=\"0 0 100 #{$height}\" fill=\"#{$fill-rgb}\" fill-opacity=\"#{$fill-alpha}\"><polygon points=\"#{map-get($points, $hypotenuse)}\"></polygon></svg>';\n\t}\n\n\t$encoded-wedge: ae-svg-encode($wedge);\n\n\t@if ($location == 'inside top') {\n\t\t&::before {\n\t\t\t@include ae-pseudo($encoded-wedge, $height, $width);\n\t\t\ttop: 0;\n\t\t}\n\t} @else if ($location == 'outside top') {\n\t\t&::before {\n\t\t\t@include ae-pseudo($encoded-wedge, $height, $width);\n\t\t\ttop: -$height * 1px;\n\t\t}\n\t} @else if ($location == 'inside bottom') {\n\t\t&::after {\n\t\t\t@include ae-pseudo($encoded-wedge, $height, $width);\n\t\t\tbottom: 0;\n\t\t}\n\t} @else if ($location == 'outside bottom') {\n\t\t&::after {\n\t\t\t@include ae-pseudo($encoded-wedge, $height, $width);\n\t\t\tbottom: -$height * 1px;\n\t\t}\n\t} @else {\n\t\t@error 'Invalid argument for $location - must use: `inside top`, `outside top`, `inside bottom`, `outside bottom`';\n\t}\n\n\t@if (map-has-key($points, $hypotenuse) == false) {\n\t\t@error 'Invalid argument for $hypotenuse - must use: `upper left`, `upper right`, `lower left`, `lower right`';\n\t}\n}\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n","// Color system\n//\n// Bootstrap defines a set of [all colors](https://getbootstrap.com/docs/4.1/getting-started/theming/#color), as well\n// as a smaller palette of [theme colors](https://getbootstrap.com/docs/4.1/getting-started/theming/#theme-colors) and\n// a set of [grays](https://getbootstrap.com/docs/4.1/getting-started/theming/#grays).\n//\n// UW Medicine brand guidelines define a smaller set of colors, which are divided into a primary and secondary palette.\n//\n// Markup: colors.twig\n//\n// Style guide: sass.variables.colors\n\n/////////////////////////\n// VARIABLE DEFINITION //\n/////////////////////////\n$white:    #fff;\n\n// calculated using 'color blender' with gray-100 as color1 and text as color2, with 8 midpoints\n$gray-100: #F5F5F5;\n$gray-200: #E2E2E2;\n$gray-300: #CECECE;\n$gray-400: #BBBBBB;\n$gray-500: #A8A8A8;\n$gray-600: #949494;\n$gray-700: #818181;\n$gray-800: #6E6E6E;\n$gray-900: #5A5A5A;\n$black:    #474747;\n\n//$grays: () !default;\n// stylelint-disable-next-line scss/dollar-variable-default\n//$grays: map-merge(\n//                (\n//                        \"100\": $gray-100,\n//                        \"200\": $gray-200,\n//                        \"300\": $gray-300,\n//                        \"400\": $gray-400,\n//                        \"500\": $gray-500,\n//                        \"600\": $gray-600,\n//                        \"700\": $gray-700,\n//                        \"800\": $gray-800,\n//                        \"900\": $gray-900\n//                ),\n//                $grays\n//);\n\n\n$blue:    #2c6ace;\n//$indigo:  #6610f2 !default;\n$purple:  #32006e;\n$light-purple: #76236c;\n//$pink:    #e83e8c !default;\n//$red:     #dc3545 !default;\n$orange:  #d24310;\n$yellow:  #ffc700;\n//$green:   #28a745 !default;\n$teal:    #008995;\n//$cyan:    #17a2b8 !default;\n\n// stylelint-disable-next-line scss/dollar-variable-default\n$colors: (\n            (\n                    \"blue\":             $blue,\n                    \"purple\":           $purple,\n                    \"light-purple\":     $light-purple,\n                    \"orange\":           $orange,\n                    \"yellow\":           $yellow,\n                    \"teal\":             $teal,\n                    \"white\":            $white,\n                    \"gray\":             $gray-100,\n                    \"gray-dark\":        $gray-800\n            )\n);\n\n$primary:       $purple;\n$secondary:     $light-purple;\n$success:       $teal;\n$info:          $blue;\n$warning:       $yellow;\n$danger:        $orange;\n$light:         $gray-100;\n$dark:          $black;\n$text:          #474747;\n$link-blue:     #3375d4;\n$link-purple:   #37236a;\n$heading-purple: #4b2e83;\n$ui-green: #1DC724;\n$ui-red: #C71D1D;\n\n// stylelint-disable-next-line scss/dollar-variable-default\n$theme-colors: (\n                      \"primary\":     $primary,\n                      \"secondary\":   $secondary,\n                      \"success\":     $success,\n                      \"info\":        $info,\n                      \"warning\":     $warning,\n                      \"danger\":      $danger,\n                      \"light\":       $light,\n                      \"dark\":        $dark,\n                      \"text\":        $text,\n                      \"link-blue\":   $link-blue,\n                      \"link-purple\": $link-purple,\n                      \"heading-purple\": $heading-purple,\n                      \"ui-green\": $ui-green,\n                      \"ui-red\": $ui-red,\n                      \"teal\": $teal,\n                );\n\n// Set a specific jump point for requesting color jumps\n//$theme-color-interval:      8% !default;\n\n// The yiq lightness value that determines when the lightness of color changes from \"dark\" to \"light\". Acceptable values are between 0 and 255.\n//$yiq-contrasted-threshold:  150 !default;\n\n// Customize the light and dark text colors for use in our YIQ color contrast function.\n//$yiq-text-dark:             $black;\n//$yiq-text-light:            $white !default;\n\n$gradient-purple-horizontal: linear-gradient(95deg, $purple, $purple 45%, $light-purple);\n\n$uwmed-menu-gray: #676868;\n\n//\n//%uwmed-mixin-gradient-light-to-dark {\n//  background: linear-gradient(95deg, $uwmed-gradient-dark-purple, $uwmed-gradient-dark-purple 45%, $uwmed-gradient-light-purple);\n//}\n\n%uwmed-gradient-angled-background {\n  background-image: url('#{$uwbase-images-folder}/angled-bg-light.png');\n}\n\n%uwmed-gradient-angled-dark-background {\n  background-image: url('#{$uwbase-images-folder}/angled-bg-light.png');\n  background-color: #F8F8F8;\n}\n\n%uwmed-box-shadow {\n  box-shadow: 1px 1px 10px 1px #dcdcdc;\n}\n",".uwm-featured-story {\n  position: relative;\n}\n\n.uwm-featured-story__background,\n.uwm-bottom-border__angled .uwm-featured-story__background {\n  position: relative;\n}\n\n.uwm-featured-story__background::after,\n.uwm-bottom-border__angled .uwm-featured-story__background::after {\n  background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' preserveAspectRatio='none' viewBox='0 0 100 50' fill='rgb(255,255,255)' fill-opacity='1'%3E%3Cpolygon points='0,50 100,50 0,0'%3E%3C/polygon%3E%3C/svg%3E\");\n  background-position: center center;\n  background-repeat: no-repeat;\n  background-size: 100% 100%;\n  content: '';\n  height: 50px;\n  left: 0;\n  position: absolute;\n  right: 0;\n  width: 100%;\n  z-index: 1;\n  bottom: 0;\n}\n\n.uwm-featured-story__background::after,\n.uwm-bottom-border__angled .uwm-featured-story__background::after {\n  width: 100%;\n  margin-bottom: -1px;\n}\n\n.uwm-featured-story__background .img-fluid {\n  margin: 0;\n}\n\n.uwm-bottom-border__straight .uwm-featured-story__background::after {\n  content: none;\n}\n\n.uwm-featured-story__title {\n  padding-top: 38px;\n  width: 100%;\n  text-transform: uppercase;\n  text-shadow: 0px 3px 6px black;\n  color: white;\n  letter-spacing: .05em;\n  margin-bottom: 6px;\n  font-size: 14px;\n  font-weight: 500;\n  margin-top: 0;\n  position: absolute;\n  top: 0px;\n}\n\n@media (min-width: 992px) {\n  .uwm-featured-story__title {\n    position: static;\n    text-shadow: none;\n    color: #474747;\n  }\n}\n\n.uwm-featured-story__content {\n  padding-bottom: 38px;\n  margin-top: 0;\n  position: static;\n}\n\n@media (min-width: 992px) {\n  .uwm-featured-story__content {\n    background-color: rgba(255, 255, 255, 0.9);\n    position: absolute;\n    padding-left: 38px;\n    padding-right: 38px;\n    top: 30px;\n  }\n}\n\n.uwm-featured-story__content-shadow {\n  box-shadow: 0 3px 6px 0 rgba(0, 0, 0, 0.15);\n}\n\n.uwm-accent-color__purple .uwm-featured-story__heading {\n  color: #32006e;\n}\n\n.uwm-accent-color__light-purple .uwm-featured-story__heading {\n  color: #76236c;\n}\n\n.uwm-accent-color__yellow .uwm-featured-story__heading {\n  color: #ffc700;\n}\n\n.uwm-accent-color__blue .uwm-featured-story__heading {\n  color: #2c6ace;\n}\n\n.uwm-accent-color__orange .uwm-featured-story__heading {\n  color: #d24310;\n}\n\n.uwm-accent-color__teal .uwm-featured-story__heading {\n  color: #008995;\n}\n"]}