{"version":3,"sources":["search/search.scss","../node_modules/bootstrap/scss/mixins/_grid.scss","../node_modules/bootstrap/scss/mixins/_breakpoints.scss","search/search.css"],"names":[],"mappings":"AAEA;EACE,oBAAmB;CACpB;;AAED;EAMM,mBAAkB;EAClB,oBAAmB;ECiBvB,mBAAkB;EAIlB,YAAW;EACX,gBAAe;EACf,oBAAuC;EACvC,mBAAsC;EAItC,oBAAsC;EAAtC,uBAAsC;MAAtC,mBAAsC;UAAtC,eAAsC;EAItC,gBAAuC;CDNpC;;AEkCD;EFnEJ;ICmCE,oBAAsC;IAAtC,4BAAsC;QAAtC,wBAAsC;YAAtC,oBAAsC;IAItC,qBAAuC;GDNpC;CGlBJ;;ADoDG;EFnEJ;ICmCE,oBAAsC;IAAtC,sBAAsC;QAAtC,kBAAsC;YAAtC,cAAsC;IAItC,eAAuC;GDNpC;CGXJ;;AD6CG;EFnEJ;ICmCE,oBAAsC;IAAtC,4BAAsC;QAAtC,wBAAsC;YAAtC,oBAAsC;IAItC,qBAAuC;GDflC;CGKN;;ADsCG;EFnEJ;ICmCE,oBAAsC;IAAtC,sBAAsC;QAAtC,kBAAsC;YAAtC,cAAsC;IAItC,eAAuC;GDRlC;CGKN;;AHpCD;EAwCI,gBAAe;EACf,iBAAgB;EAChB,8BAA6B;CAC9B;;AAIH;EACE,cAAa;CACd","file":"search.css","sourcesContent":["@import 'init';\n\nbody {\n  background: #fff3f2;\n}\n\nbody.is-path-search {\n\n  section.content-top {\n\n    .views-exposed-form, .facets-widget-dropdown {\n\n      margin-right: 15px;\n      margin-bottom: 10px;\n\n      @include make-col-ready();\n      @include make-col(12);\n\n      @include media-breakpoint-down('md') {\n        @include make-col(4);\n      }\n      @include media-breakpoint-down('lg') {\n        @include make-col(3);\n      }\n\n      // Search text input\n      .form-item input.form-text {\n        @include media-breakpoint-down('md') {\n          @include make-col(7);\n        }\n      }\n      // Search text input\n      .dropdown.bootstrap-select {\n        @include media-breakpoint-down('md') {\n          @include make-col(3);\n        }\n\n      }\n\n    }\n\n\n\n  }\n\n  section.content-main {\n    margin-top: 2em;\n    padding-top: 1em;\n    border-top: 1px solid #dcdcdc;\n  }\n\n}\n\n#block-hidden-show-region-item, .views-exposed-form span.js-form-item.form-item.js-form-type-textfield.form-type-textfield.js-form-item-s.form-item-s.btn.btn-outline-teal {\n  display: none;\n}\n\n\n\n","/// Grid system\n//\n// Generate semantic grid columns with these mixins.\n\n@mixin make-container() {\n  width: 100%;\n  padding-right: ($grid-gutter-width / 2);\n  padding-left: ($grid-gutter-width / 2);\n  margin-right: auto;\n  margin-left: auto;\n}\n\n\n// For each breakpoint, define the maximum width of the container in a media query\n@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {\n  @each $breakpoint, $container-max-width in $max-widths {\n    @include media-breakpoint-up($breakpoint, $breakpoints) {\n      max-width: $container-max-width;\n    }\n  }\n}\n\n@mixin make-row() {\n  display: flex;\n  flex-wrap: wrap;\n  margin-right: ($grid-gutter-width / -2);\n  margin-left: ($grid-gutter-width / -2);\n}\n\n@mixin make-col-ready() {\n  position: relative;\n  // Prevent columns from becoming too narrow when at smaller grid tiers by\n  // always setting `width: 100%;`. This works because we use `flex` values\n  // later on to override this initial width.\n  width: 100%;\n  min-height: 1px; // Prevent collapsing\n  padding-right: ($grid-gutter-width / 2);\n  padding-left: ($grid-gutter-width / 2);\n}\n\n@mixin make-col($size, $columns: $grid-columns) {\n  flex: 0 0 percentage($size / $columns);\n  // Add a `max-width` to ensure content within each column does not blow out\n  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari\n  // do not appear to require this.\n  max-width: percentage($size / $columns);\n}\n\n@mixin make-col-offset($size, $columns: $grid-columns) {\n  $num: $size / $columns;\n  margin-left: if($num == 0, 0, percentage($num));\n}\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02px, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n","body {\n  background: #fff3f2;\n}\n\nbody.is-path-search section.content-top .views-exposed-form, body.is-path-search section.content-top .facets-widget-dropdown {\n  margin-right: 15px;\n  margin-bottom: 10px;\n  position: relative;\n  width: 100%;\n  min-height: 1px;\n  padding-right: 15px;\n  padding-left: 15px;\n  flex: 0 0 100%;\n  max-width: 100%;\n}\n\n@media (max-width: 991.98px) {\n  body.is-path-search section.content-top .views-exposed-form, body.is-path-search section.content-top .facets-widget-dropdown {\n    flex: 0 0 33.33333%;\n    max-width: 33.33333%;\n  }\n}\n\n@media (max-width: 1199.98px) {\n  body.is-path-search section.content-top .views-exposed-form, body.is-path-search section.content-top .facets-widget-dropdown {\n    flex: 0 0 25%;\n    max-width: 25%;\n  }\n}\n\n@media (max-width: 991.98px) {\n  body.is-path-search section.content-top .views-exposed-form .form-item input.form-text, body.is-path-search section.content-top .facets-widget-dropdown .form-item input.form-text {\n    flex: 0 0 58.33333%;\n    max-width: 58.33333%;\n  }\n}\n\n@media (max-width: 991.98px) {\n  body.is-path-search section.content-top .views-exposed-form .dropdown.bootstrap-select, body.is-path-search section.content-top .facets-widget-dropdown .dropdown.bootstrap-select {\n    flex: 0 0 25%;\n    max-width: 25%;\n  }\n}\n\nbody.is-path-search section.content-main {\n  margin-top: 2em;\n  padding-top: 1em;\n  border-top: 1px solid #dcdcdc;\n}\n\n#block-hidden-show-region-item, .views-exposed-form span.js-form-item.form-item.js-form-type-textfield.form-type-textfield.js-form-item-s.form-item-s.btn.btn-outline-teal {\n  display: none;\n}\n"]}