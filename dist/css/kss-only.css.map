{"version":3,"sources":["kss-only.css","kss-only.scss","../../node_modules/bootstrap/scss/mixins/_background-variant.scss","../../node_modules/bootstrap/scss/mixins/_hover.scss","../../node_modules/bootstrap/scss/mixins/_breakpoints.scss","../../node_modules/bootstrap/scss/mixins/_grid.scss"],"names":[],"mappings":"AAAA;ECUE,oBAAmB;CACpB;;ACNC;EACE,qCAAmC;CACpC;;ACSD;;;EDLI,qCAAgD;CCQnD;;ADdD;EACE,qCAAmC;CACpC;;ACSD;;;EDLI,qCAAgD;CCQnD;;ADdD;EACE,qCAAmC;CACpC;;ACSD;;;EDLI,qCAAgD;CCQnD;;ADdD;EACE,qCAAmC;CACpC;;ACSD;;;EDLI,qCAAgD;CCQnD;;ADdD;EACE,qCAAmC;CACpC;;ACSD;;;EDLI,qCAAgD;CCQnD;;ADdD;EACE,qCAAmC;CACpC;;ACSD;;;EDLI,qCAAgD;CCQnD;;ADdD;EACE,kCAAmC;CACpC;;ACSD;;;EDLI,qCAAgD;CCQnD;;ADdD;EACE,qCAAmC;CACpC;;ACSD;;;EDLI,qCAAgD;CCQnD;;ADdD;EACE,qCAAmC;CACpC;;ACSD;;;EDLI,qCAAgD;CCQnD;;ACyCC;EH3CJ;IIwBE,oBAAsC;IAAtC,sBAAsC;QAAtC,kBAAsC;YAAtC,cAAsC;IAItC,eAAuC;GJxBxC;CD8EA","file":"kss-only.css","sourcesContent":["[id^='kssref-layouts-'] [class^='layout-'][class*='__'] {\n  outline: 1px dotted;\n}\n\n.swatch-blue {\n  background-color: #2c6ace !important;\n}\n\na.swatch-blue:hover, a.swatch-blue:focus,\nbutton.swatch-blue:hover,\nbutton.swatch-blue:focus {\n  background-color: #2354a4 !important;\n}\n\n.swatch-purple {\n  background-color: #32006e !important;\n}\n\na.swatch-purple:hover, a.swatch-purple:focus,\nbutton.swatch-purple:hover,\nbutton.swatch-purple:focus {\n  background-color: #1b003b !important;\n}\n\n.swatch-light-purple {\n  background-color: #76236c !important;\n}\n\na.swatch-light-purple:hover, a.swatch-light-purple:focus,\nbutton.swatch-light-purple:hover,\nbutton.swatch-light-purple:focus {\n  background-color: #4f1748 !important;\n}\n\n.swatch-orange {\n  background-color: #d24310 !important;\n}\n\na.swatch-orange:hover, a.swatch-orange:focus,\nbutton.swatch-orange:hover,\nbutton.swatch-orange:focus {\n  background-color: #a3340c !important;\n}\n\n.swatch-yellow {\n  background-color: #ffc700 !important;\n}\n\na.swatch-yellow:hover, a.swatch-yellow:focus,\nbutton.swatch-yellow:hover,\nbutton.swatch-yellow:focus {\n  background-color: #cc9f00 !important;\n}\n\n.swatch-teal {\n  background-color: #008995 !important;\n}\n\na.swatch-teal:hover, a.swatch-teal:focus,\nbutton.swatch-teal:hover,\nbutton.swatch-teal:focus {\n  background-color: #005a62 !important;\n}\n\n.swatch-white {\n  background-color: #fff !important;\n}\n\na.swatch-white:hover, a.swatch-white:focus,\nbutton.swatch-white:hover,\nbutton.swatch-white:focus {\n  background-color: #e6e6e6 !important;\n}\n\n.swatch-gray {\n  background-color: #c3c5c8 !important;\n}\n\na.swatch-gray:hover, a.swatch-gray:focus,\nbutton.swatch-gray:hover,\nbutton.swatch-gray:focus {\n  background-color: #a8abb0 !important;\n}\n\n.swatch-gray-dark {\n  background-color: #535b64 !important;\n}\n\na.swatch-gray-dark:hover, a.swatch-gray-dark:focus,\nbutton.swatch-gray-dark:hover,\nbutton.swatch-gray-dark:focus {\n  background-color: #3c4248 !important;\n}\n\n@media (min-width: 768px) {\n  #kssref-components-search-provider-card {\n    flex: 0 0 50%;\n    max-width: 50%;\n  }\n}\n","// sass-lint:disable no-ids\n\n@import 'init';\n\n// This file is used to add styles to the style guide and is not included in\n// the Drupal site. It gets included by the style guide by adding it to the\n// options.styleGuide.css object in gulpfile.js.\n\n// Add an outline to every grid item in the style guide.\n[id^='kssref-layouts-'] [class^='layout-'][class*='__'] {\n  outline: 1px dotted color('grey');\n}\n\n@each $color, $value in $colors {\n  @include bg-variant(\".swatch-#{$color}\", $value);\n}\n\n#kssref-components-search-provider-card {\n  @include media-breakpoint-up(md) {\n   @include make-col(6);\n  }\n}","// stylelint-disable declaration-no-important\n\n// Contextual backgrounds\n\n@mixin bg-variant($parent, $color) {\n  #{$parent} {\n    background-color: $color !important;\n  }\n  a#{$parent},\n  button#{$parent} {\n    @include hover-focus {\n      background-color: darken($color, 10%) !important;\n    }\n  }\n}\n\n@mixin bg-gradient-variant($parent, $color) {\n  #{$parent} {\n    background: $color linear-gradient(180deg, mix($body-bg, $color, 15%), $color) repeat-x !important;\n  }\n}\n","// Hover mixin and `$enable-hover-media-query` are deprecated.\n//\n// Originally added during our alphas and maintained during betas, this mixin was\n// designed to prevent `:hover` stickiness on iOS-an issue where hover styles\n// would persist after initial touch.\n//\n// For backward compatibility, we've kept these mixins and updated them to\n// always return their regular pseudo-classes instead of a shimmed media query.\n//\n// Issue: https://github.com/twbs/bootstrap/issues/25195\n\n@mixin hover {\n  &:hover { @content; }\n}\n\n@mixin hover-focus {\n  &:hover,\n  &:focus {\n    @content;\n  }\n}\n\n@mixin plain-hover-focus {\n  &,\n  &:hover,\n  &:focus {\n    @content;\n  }\n}\n\n@mixin hover-focus-active {\n  &:hover,\n  &:focus,\n  &:active {\n    @content;\n  }\n}\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02px, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n","/// Grid system\n//\n// Generate semantic grid columns with these mixins.\n\n@mixin make-container() {\n  width: 100%;\n  padding-right: ($grid-gutter-width / 2);\n  padding-left: ($grid-gutter-width / 2);\n  margin-right: auto;\n  margin-left: auto;\n}\n\n\n// For each breakpoint, define the maximum width of the container in a media query\n@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {\n  @each $breakpoint, $container-max-width in $max-widths {\n    @include media-breakpoint-up($breakpoint, $breakpoints) {\n      max-width: $container-max-width;\n    }\n  }\n}\n\n@mixin make-row() {\n  display: flex;\n  flex-wrap: wrap;\n  margin-right: ($grid-gutter-width / -2);\n  margin-left: ($grid-gutter-width / -2);\n}\n\n@mixin make-col-ready() {\n  position: relative;\n  // Prevent columns from becoming too narrow when at smaller grid tiers by\n  // always setting `width: 100%;`. This works because we use `flex` values\n  // later on to override this initial width.\n  width: 100%;\n  min-height: 1px; // Prevent collapsing\n  padding-right: ($grid-gutter-width / 2);\n  padding-left: ($grid-gutter-width / 2);\n}\n\n@mixin make-col($size, $columns: $grid-columns) {\n  flex: 0 0 percentage($size / $columns);\n  // Add a `max-width` to ensure content within each column does not blow out\n  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari\n  // do not appear to require this.\n  max-width: percentage($size / $columns);\n}\n\n@mixin make-col-offset($size, $columns: $grid-columns) {\n  $num: $size / $columns;\n  margin-left: if($num == 0, 0, percentage($num));\n}\n"]}