<?php

use Drupal\node\Entity\Node;
use Drupal\Core\Database\Database;
use Drupal\views\Views;

/**
 * @file
 * Contains the theme's functions to manipulate Drupal's default markup.
 *
 * Complete documentation for this file is available online.
 * @see https://drupal.org/node/1728096
 */


/**
 * Override or insert variables into the maintenance page template.
 *
 * @param array $variables
 *   Variables to pass to the theme template.
 * @param string $hook
 *   The name of the template being rendered ("maintenance_page" in this case.)
 */
/* -- Delete this line if you want to use this function
function uwmbase_preprocess_maintenance_page(&$variables, $hook) {
  // When a variable is manipulated or added in preprocess_html or
  // preprocess_page, that same work is probably needed for the maintenance page
  // as well, so we can just re-use those functions to do that work here.
  uwmbase_preprocess_html($variables, $hook);
  uwmbase_preprocess_page($variables, $hook);
}
// */

/**
 * Override or insert variables into the html templates.
 *
 * @param array $variables
 *   Variables to pass to the theme template.
 * @param string $hook
 *   The name of the template being rendered ("html" in this case.)
 */
/* -- Delete this line if you want to use this function
function uwmbase_preprocess_html(&$variables, $hook) {
  $variables['sample_variable'] = t('Lorem ipsum.');

  // The body tag's classes are controlled by the $classes_array variable. To
  // remove a class from $classes_array, use array_diff().
  $variables['classes_array'] = array_diff($variables['classes_array'],
    array('class-to-remove')
  );
}
// */

/**
 * Override or insert variables into the page templates.
 *
 * @param array $variables
 *   Variables to pass to the theme template.
 * @param string $hook
 *   The name of the template being rendered ("page" in this case.)
 */
/* -- Delete this line if you want to use this function
function uwmbase_preprocess_page(&$variables, $hook) {
  $variables['sample_variable'] = t('Lorem ipsum.');
}
// */

/**
 * Override or insert variables into the region templates.
 *
 * @param array $variables
 *   Variables to pass to the theme template.
 * @param string $hook
 *   The name of the template being rendered ("region" in this case.)
 */
/* -- Delete this line if you want to use this function
function uwmbase_preprocess_region(&$variables, $hook) {
  // Don't use Zen's region--no-wrapper.tpl.php template for sidebars.
  if (strpos($variables['region'], 'sidebar_') === 0) {
    $variables['theme_hook_suggestions'] = array_diff(
      $variables['theme_hook_suggestions'], array('region__no_wrapper')
    );
  }
}
// */

/**
 * Override or insert variables into the block templates.
 *
 * @param array $variables
 *   Variables to pass to the theme template.
 * @param string $hook
 *   The name of the template being rendered ("block" in this case.)
 */
/* -- Delete this line if you want to use this function
function uwmbase_preprocess_block(&$variables, $hook) {
  // Add a count to all the blocks in the region.
  // $variables['classes_array'][] = 'count-' . $variables['block_id'];

  // By default, Zen will use the block--no-wrapper.tpl.php for the main
  // content. This optional bit of code undoes that:
  if ($variables['block_html_id'] == 'block-system-main') {
    $variables['theme_hook_suggestions'] = array_diff(
      $variables['theme_hook_suggestions'], array('block__no_wrapper')
    );
  }
}
// */

/**
 * Override or insert variables into the node templates.
 *
 * @param array $variables
 *   Variables to pass to the theme template.
 * @param string $hook
 *   The name of the template being rendered ("node" in this case.)
 */
/* -- Delete this line if you want to use this function
function uwmbase_preprocess_node(&$variables, $hook) {
  $variables['sample_variable'] = t('Lorem ipsum.');

  // Optionally, run node-type-specific preprocess functions, like
  // uwmbase_preprocess_node_page() or uwmbase_preprocess_node_story().
  $function = __FUNCTION__ . '_' . $variables['node']->type;
  if (function_exists($function)) {
    $function($variables, $hook);
  }
}
// */

/**
 * Override or insert variables into the comment templates.
 *
 * @param array $variables
 *   Variables to pass to the theme template.
 * @param string $hook
 *   The name of the template being rendered ("comment" in this case.)
 */
/* -- Delete this line if you want to use this function
function uwmbase_preprocess_comment(&$variables, $hook) {
  $variables['sample_variable'] = t('Lorem ipsum.');
}
// */

/**
 * Implements hook_preprocess_HOOK() for image hero paragraph.
 */
function uwmbase_preprocess_paragraph__uwm_image_hero(&$variables) {
  $paragraph = $variables['paragraph'];

   $parent = $paragraph->getParentEntity();

   if ($parent->hasField('field_uwm_parent_page')) {
    $entity_ref = $parent->get('field_uwm_parent_page');
    // if our field has data
    if ($entity_ref->count() > 0) {
      $entity = $entity_ref->entity;
      $variables['parent_page_title'] = $entity->get('title')->value;
      $variables['parent_page_url'] = $entity->toUrl()->toString();
    }
  }
   
}

/**
 * Implementation of hook_theme_suggestions_form_alter().
 */
function uwmbase_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $current_path = \Drupal::service('path.current')->getPath();
  $alias = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);

  if ($alias == '/provider-resource') {
    $suggestions[] = $variables['theme_hook_original'] . '__provider_resource';
  }
}

/**
 * Implementation of hook_theme_suggestions_form_element_alter().
 */
function uwmbase_theme_suggestions_form_element_alter(array &$suggestions, array $variables) {
  $current_path = \Drupal::service('path.current')->getPath();
  $alias = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);

  if ($alias == '/provider-resource') {
    $suggestions[] = $variables['theme_hook_original'] . '__provider_resource';
  }
}

/**
 * Implementation of hook_theme_suggestions_views_view_alter().
 */
function uwmbase_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
  $current_path = \Drupal::service('path.current')->getPath();
  $alias = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);

  if ($alias == '/provider-resource') {
    $suggestions[] = $variables['theme_hook_original'] . '__provider_resource';
  }
}

/**
 * Implementation of hook_theme_suggestions_bef_links_alter().
 */
function uwmbase_theme_suggestions_bef_links_alter(array &$suggestions, array $variables) {
  $current_path = \Drupal::service('path.current')->getPath();
  $alias = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);

  if ($alias == '/provider-resource') {
    $suggestions[] = $variables['theme_hook_original'] . '__provider_resource';
  }
}



/**
 * Implements hook_preprocess_HOOK() for container.
 */
function uwmbase_preprocess_container(&$variables) {
  $current_path = \Drupal::service('path.current')->getPath();
  $alias = \Drupal::service('path.alias_manager')
    ->getAliasByPath($current_path);

  if ($alias == '/provider-resource') {
    if (!empty($variables['element']["#type"])) {
      if ($variables['element']["#type"] == "link") {
        $classes = '';
        if (array_key_exists("class", $variables['attributes'])) {
          $classes = $variables['attributes']["class"];
        }

        if ($classes == "bef-link-active") {
          $classes = $classes . " btn btn-teal";
        }
        else {
          $classes = "btn btn-outline-teal";
        }
        //    $classes = array_push($classes, "btn", "btn-outline");
        $variables["attributes"]["class"] = $classes;
      }
    }
  }
}

//  $current_path = \Drupal::service('path.current')->getPath();
//  $alias = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);
//
//  if ($alias == '/provider-resource') {
//    $suggestions[] = $variables['theme_hook_original'] . '__provider_resource';
//  }
