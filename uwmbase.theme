<?php

use Drupal\node\Entity\Node;
use Drupal\Core\Database\Database;
use Drupal\views\Views;

/**
 * @file
 * Contains the theme's functions to manipulate Drupal's default markup.
 *
 * Complete documentation for this file is available online.
 * @see https://drupal.org/node/1728096
 */


/**
 * Override or insert variables into the maintenance page template.
 *
 * @param array $variables
 *   Variables to pass to the theme template.
 * @param string $hook
 *   The name of the template being rendered ("maintenance_page" in this case.)
 */
/* -- Delete this line if you want to use this function
function uwmbase_preprocess_maintenance_page(&$variables, $hook) {
  // When a variable is manipulated or added in preprocess_html or
  // preprocess_page, that same work is probably needed for the maintenance page
  // as well, so we can just re-use those functions to do that work here.
  uwmbase_preprocess_html($variables, $hook);
  uwmbase_preprocess_page($variables, $hook);
}
// */


/**
 * Implements hook_page_attachments_alter().
 */
function uwmbase_page_attachments_alter(&$variables) {

  /***
   * Add libraries for search pages
   */
  $currentPath = \Drupal::service('path.current')->getPath();
  if (stripos($currentPath, '/search') !== FALSE) {
    $variables['#attached']['library'][] = 'uwmbase/search';
  }
  if (stripos($currentPath, '/search/locations') !== FALSE) {
    $variables['#attached']['library'][] = 'uwmbase/search-locations';
  }
  if (stripos($currentPath, '/search/providers') !== FALSE) {
    $variables['#attached']['library'][] = 'uwmbase/search-providers';
  }

}


/**
 * Override or insert variables into the html templates.
 *
 * @param array $variables
 *   Variables to pass to the theme template.
 * @param string $hook
 *   The name of the template being rendered ("html" in this case.)
 */
/* -- Delete this line if you want to use this function
function uwmbase_preprocess_html(&$variables, $hook) {
  $variables['sample_variable'] = t('Lorem ipsum.');

  // The body tag's classes are controlled by the $classes_array variable. To
  // remove a class from $classes_array, use array_diff().
  $variables['classes_array'] = array_diff($variables['classes_array'],
    array('class-to-remove')
  );
}
// */

/**
 * Override or insert variables into the page templates.
 *
 * @param array $variables
 *   Variables to pass to the theme template.
 * @param string $hook
 *   The name of the template being rendered ("page" in this case.)
 */
/* -- Delete this line if you want to use this function
function uwmbase_preprocess_page(&$variables, $hook) {
  $variables['sample_variable'] = t('Lorem ipsum.');
}
// */

/**
 * Override or insert variables into the region templates.
 *
 * @param array $variables
 *   Variables to pass to the theme template.
 * @param string $hook
 *   The name of the template being rendered ("region" in this case.)
 */
function uwmbase_preprocess_region(&$variables, $hook) {

  if (strpos($variables['region'], 'content_top') === 0) {
    $variables['current_path'] = \Drupal::service('path.current')->getPath();

  }

}


/**
 * Override or insert variables into the block templates.
 *
 * @param array $variables
 *   Variables to pass to the theme template.
 * @param string $hook
 *   The name of the template being rendered ("block" in this case.)
 */
/* -- Delete this line if you want to use this function
function uwmbase_preprocess_block(&$variables, $hook) {
  // Add a count to all the blocks in the region.
  // $variables['classes_array'][] = 'count-' . $variables['block_id'];

  // By default, Zen will use the block--no-wrapper.tpl.php for the main
  // content. This optional bit of code undoes that:
  if ($variables['block_html_id'] == 'block-system-main') {
    $variables['theme_hook_suggestions'] = array_diff(
      $variables['theme_hook_suggestions'], array('block__no_wrapper')
    );
  }
}
// */

/**
 * Override or insert variables into the node templates.
 *
 * @param array $variables
 *   Variables to pass to the theme template.
 * @param string $hook
 *   The name of the template being rendered ("node" in this case.)
 */
/* -- Delete this line if you want to use this function
function uwmbase_preprocess_node(&$variables, $hook) {
  $variables['sample_variable'] = t('Lorem ipsum.');

  // Optionally, run node-type-specific preprocess functions, like
  // uwmbase_preprocess_node_page() or uwmbase_preprocess_node_story().
  $function = __FUNCTION__ . '_' . $variables['node']->type;
  if (function_exists($function)) {
    $function($variables, $hook);
  }
}
// */

/**
 * Override or insert variables into the comment templates.
 *
 * @param array $variables
 *   Variables to pass to the theme template.
 * @param string $hook
 *   The name of the template being rendered ("comment" in this case.)
 */
/* -- Delete this line if you want to use this function
function uwmbase_preprocess_comment(&$variables, $hook) {
  $variables['sample_variable'] = t('Lorem ipsum.');
}
// */

/**
 * Implements hook_preprocess_HOOK().
 */
function uwmbase_preprocess_paragraph__uwm_image_hero(&$variables) {
  $paragraph = $variables['paragraph'];

  $parent = $paragraph->getParentEntity();

  if ($parent->hasField('field_uwm_parent_page')) {
    $entity_ref = $parent->get('field_uwm_parent_page');
    // if our field has data
    if ($entity_ref->count() > 0) {
      $entity = $entity_ref->entity;
      $variables['parent_page_title'] = $entity->get('title')->value;
      $variables['parent_page_url'] = $entity->toUrl()->toString();
    }
  }

}

/**
 * Implements hook_theme_suggestions_form_alter().
 */
function uwmbase_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $current_path = \Drupal::service('path.current')->getPath();
  $alias = \Drupal::service('path.alias_manager')
    ->getAliasByPath($current_path);

  if ($alias == '/provider-resource') {
    $suggestions[] = $variables['theme_hook_original'] . '__provider_resource';
  }
}

/**
 * Implements hook_theme_suggestions_form_element_alter().
 */
function uwmbase_theme_suggestions_form_element_alter(array &$suggestions, array $variables) {
  if ($_REQUEST['view_display_id'] == 'uwm_provider_resources_block' ||
      strpos($_SERVER['REQUEST_URI'], '/provider-resource') >= 0) {
    $suggestions[] = $variables['theme_hook_original'] . '__provider_resource';
  }
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function uwmbase_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
  $current_path = \Drupal::service('path.current')->getPath();
  $alias = \Drupal::service('path.alias_manager')
    ->getAliasByPath($current_path);

  if (strpos($alias, '/provider-resource') !== FALSE) {
    $suggestions[] = $variables['theme_hook_original'] . '__provider_resource';
  }
}

/**
 * Implements hook_theme_suggestions_form_element_alter().
 */
function uwmbase_theme_suggestions_bef_radios_alter(array &$suggestions, array $variables) {
  if (array_key_exists('view_display_id', $_REQUEST)) {
    if ($_REQUEST['view_display_id'] == 'uwm_provider_resources_block' ||
        strpos($_SERVER['REQUEST_URI'], '/provider-resource') >= 0) {
      $suggestions[] = $variables['theme_hook_original'] . '__provider_resource';
    }
  }
}

/**
 * Implements hook_form_FORM_ID_form_alter().
 * Limit the list of sub-specialties terms to the nodes which are returned in
 * the results
 */
function uwmbase_form_views_exposed_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  if ($form['#id'] == 'views-exposed-form-uwm-provider-resources-uwm-provider-resources-block') {

    // If the exposed filter does not exist on this form, there's nothing we can do here.
    if (!array_key_exists('subspecialty', $form)) {
      return;
    }

    // gather the view arguments from user input
    $input = $form_state->getUserInput();
    $specialty = $input['specialty'];
    $type = $input['type'];
    $subspecialty = $input['subspecialty'];

    // Options are tag entity id => title.
    $options = $form['subspecialty']['#options'];

    // load the media entities that match the user input arguments for specialty and type
    $query = \Drupal::entityQuery('media');
    $query->condition('bundle', [
      'uwm_provider_resource_video',
      'uwm_provider_resource_document',
    ], 'IN');
    $query->condition('field_uwm_prov_res_specialty', $specialty); // if specialty == all then we won't get any entity ids - this is preferable
    if ($type !== "All") {
      $query->condition('field_uwm_prov_res_media_type', $type);
    };
    $entity_ids = $query->execute();
    $mids = $entity_ids;

    // if we have a set of media ids to work with, limit the subspecialty options to the subspecialties assigned to the filtered media ids
    if ($mids) {
      $connection = Database::getConnection();
      $sth = $connection->select('media__field_uwm_prov_res_sub_specialty', 'uwm_provider_resource_video');
      $sth->addField('uwm_provider_resource_video', 'field_uwm_prov_res_sub_specialty_target_id');
      $sth->condition('entity_id', $mids, 'IN');
      $sth->groupBy('uwm_provider_resource_video.field_uwm_prov_res_sub_specialty_target_id');

      $data = $sth->execute();
      // Flip the result set so the array key is the tag entity id.
      $results = array_flip($data->fetchAll(\PDO::FETCH_COLUMN, 'field_uwm_prov_res_sub_specialty_target_id'));
    }


    $current_selection = $options[$subspecialty];
    $results['All'] = $options['All'];
    $results[$subspecialty] = $current_selection; // maintain current selection so we don't end up with an 'illegal selection' error
    // Intersects the arrays, giving us back an "filtered" array.
    $options = array_intersect_key($options, $results);

    // Replace the options.
    $form['subspecialty']['#options'] = $options;
  }
}
