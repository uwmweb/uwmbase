<?php
/**
 * @file
 * Contains the theme's functions to manipulate Drupal's default markup.
 *
 * Complete documentation for this file is available online.
 * @see https://drupal.org/node/1728096
 */


/**
 * Override or insert variables into the maintenance page template.
 *
 * @param array $variables
 *   Variables to pass to the theme template.
 * @param string $hook
 *   The name of the template being rendered ("maintenance_page" in this case.)
 */
/* -- Delete this line if you want to use this function
function uwmbase_preprocess_maintenance_page(&$variables, $hook) {
  // When a variable is manipulated or added in preprocess_html or
  // preprocess_page, that same work is probably needed for the maintenance page
  // as well, so we can just re-use those functions to do that work here.
  uwmbase_preprocess_html($variables, $hook);
  uwmbase_preprocess_page($variables, $hook);
}
// */

/**
 * Override or insert variables into the html templates.
 *
 * @param array $variables
 *   Variables to pass to the theme template.
 * @param string $hook
 *   The name of the template being rendered ("html" in this case.)
 */
/* -- Delete this line if you want to use this function
function uwmbase_preprocess_html(&$variables, $hook) {
  $variables['sample_variable'] = t('Lorem ipsum.');

  // The body tag's classes are controlled by the $classes_array variable. To
  // remove a class from $classes_array, use array_diff().
  $variables['classes_array'] = array_diff($variables['classes_array'],
    array('class-to-remove')
  );
}
// */

/**
 * Override or insert variables into the page templates.
 *
 * @param array $variables
 *   Variables to pass to the theme template.
 * @param string $hook
 *   The name of the template being rendered ("page" in this case.)
 */
/* -- Delete this line if you want to use this function
function uwmbase_preprocess_page(&$variables, $hook) {
  $variables['sample_variable'] = t('Lorem ipsum.');
}
// */

/**
 * Override or insert variables into the region templates.
 *
 * @param array $variables
 *   Variables to pass to the theme template.
 * @param string $hook
 *   The name of the template being rendered ("region" in this case.)
 */
/* -- Delete this line if you want to use this function
function uwmbase_preprocess_region(&$variables, $hook) {
  // Don't use Zen's region--no-wrapper.tpl.php template for sidebars.
  if (strpos($variables['region'], 'sidebar_') === 0) {
    $variables['theme_hook_suggestions'] = array_diff(
      $variables['theme_hook_suggestions'], array('region__no_wrapper')
    );
  }
}
// */

/**
 * Override or insert variables into the block templates.
 *
 * @param array $variables
 *   Variables to pass to the theme template.
 * @param string $hook
 *   The name of the template being rendered ("block" in this case.)
 */
/* -- Delete this line if you want to use this function
function uwmbase_preprocess_block(&$variables, $hook) {
  // Add a count to all the blocks in the region.
  // $variables['classes_array'][] = 'count-' . $variables['block_id'];

  // By default, Zen will use the block--no-wrapper.tpl.php for the main
  // content. This optional bit of code undoes that:
  if ($variables['block_html_id'] == 'block-system-main') {
    $variables['theme_hook_suggestions'] = array_diff(
      $variables['theme_hook_suggestions'], array('block__no_wrapper')
    );
  }
}
// */

/**
 * Override or insert variables into the node templates.
 *
 * @param array $variables
 *   Variables to pass to the theme template.
 * @param string $hook
 *   The name of the template being rendered ("node" in this case.)
 */
/* -- Delete this line if you want to use this function
function uwmbase_preprocess_node(&$variables, $hook) {
  $variables['sample_variable'] = t('Lorem ipsum.');

  // Optionally, run node-type-specific preprocess functions, like
  // uwmbase_preprocess_node_page() or uwmbase_preprocess_node_story().
  $function = __FUNCTION__ . '_' . $variables['node']->type;
  if (function_exists($function)) {
    $function($variables, $hook);
  }
}
// */

/**
 * Override or insert variables into the comment templates.
 *
 * @param array $variables
 *   Variables to pass to the theme template.
 * @param string $hook
 *   The name of the template being rendered ("comment" in this case.)
 */
/* -- Delete this line if you want to use this function
function uwmbase_preprocess_comment(&$variables, $hook) {
  $variables['sample_variable'] = t('Lorem ipsum.');
}
// */

/**
 * Implements theme_preprocess_page().
 */
function uwmed_preprocess_page(&$variables) {
  // http://content.uwmed.local/?fix-entity-type
  if (stripos($_SERVER['REQUEST_URI'], 'fix-entity-type') !== FALSE) {

    // @see docroot/modules/contrib/multiversion/src/MultiversionManager.php#337
    //$types = ['media'=>[]];
    $supported_entity_types = \Drupal::config('multiversion.settings')->get('supported_entity_types') ?: [];

    if ($supported_entity_types) {
      try {

        \Drupal::service('multiversion.manager')
          ->disableEntityTypes($supported_entity_types);

      } catch (Exception $e) {

        \Drupal::logger('multiversion_cleanup')->error($e->getMessage());

      }
    }
  }

  if (stripos($_SERVER['REQUEST_URI'], 'fix-entity-type-media') !== FALSE) {

    // @see docroot/modules/contrib/multiversion/src/MultiversionManager.php#337
    $types = ['media'=>[]];
    $supported_entity_types = \Drupal::config('multiversion.settings')->get('supported_entity_types') ?: [];

    if ($supported_entity_types) {
      try {

        \Drupal::service('multiversion.manager')
          ->disableEntityTypes($types);

      } catch (Exception $e) {

        \Drupal::logger('multiversion_cleanup')->error($e->getMessage());

      }
    }
  }

  if (stripos($_SERVER['REQUEST_URI'], 'fix-entity-type-file') !== FALSE) {

    // @see docroot/modules/contrib/multiversion/src/MultiversionManager.php#337
    $types = ['file'=>[]];
    $supported_entity_types = \Drupal::config('multiversion.settings')->get('supported_entity_types') ?: [];

    if ($supported_entity_types) {
      try {

        \Drupal::service('multiversion.manager')
          ->disableEntityTypes($types);

      } catch (Exception $e) {

        \Drupal::logger('multiversion_cleanup')->error($e->getMessage());

      }
    }
  }

  if (stripos($_SERVER['REQUEST_URI'], 'fix-entity-type-tax') !== FALSE) {

    // @see docroot/modules/contrib/multiversion/src/MultiversionManager.php#337
    $types = ['taxonomy_term'=>[]];
    $supported_entity_types = \Drupal::config('multiversion.settings')->get('supported_entity_types') ?: [];

    if ($supported_entity_types) {
      try {

        \Drupal::service('multiversion.manager')
          ->disableEntityTypes($types);

      } catch (Exception $e) {

        \Drupal::logger('multiversion_cleanup')->error($e->getMessage());

      }
    }
  }
  if (stripos($_SERVER['REQUEST_URI'], 'fix-entity-type-paragraph') !== FALSE) {

    // @see docroot/modules/contrib/multiversion/src/MultiversionManager.php#337
    $types = ['paragraph'=>[]];
    $supported_entity_types = \Drupal::config('multiversion.settings')->get('supported_entity_types') ?: [];

    if ($supported_entity_types) {
      try {

        \Drupal::service('multiversion.manager')
          ->disableEntityTypes($types);

      } catch (Exception $e) {

        \Drupal::logger('multiversion_cleanup')->error($e->getMessage());

      }
    }
  }
  if (stripos($_SERVER['REQUEST_URI'], 'fix-entity-type-menu') !== FALSE) {

    // @see docroot/modules/contrib/multiversion/src/MultiversionManager.php#337
    $types = ['menu_link'=>[]];
    $supported_entity_types = \Drupal::config('multiversion.settings')->get('supported_entity_types') ?: [];

    if ($supported_entity_types) {
      try {

        \Drupal::service('multiversion.manager')
          ->disableEntityTypes($types);

      } catch (Exception $e) {

        \Drupal::logger('multiversion_cleanup')->error($e->getMessage());

      }
    }
  }
  if (stripos($_SERVER['REQUEST_URI'], 'fix-entity-type-node') !== FALSE) {

    // @see docroot/modules/contrib/multiversion/src/MultiversionManager.php#337
    $types = ['node'=>[]];
    $supported_entity_types = \Drupal::config('multiversion.settings')->get('supported_entity_types') ?: [];

    if ($supported_entity_types) {
      try {

        \Drupal::service('multiversion.manager')
          ->disableEntityTypes($types);

      } catch (Exception $e) {

        \Drupal::logger('multiversion_cleanup')->error($e->getMessage());

      }
    }
  }
  if (stripos($_SERVER['REQUEST_URI'], 'fix-entity-type-shortcut') !== FALSE) {

    // @see docroot/modules/contrib/multiversion/src/MultiversionManager.php#337
    $types = ['shortcut'=>[]];
    $supported_entity_types = \Drupal::config('multiversion.settings')->get('supported_entity_types') ?: [];

    if ($supported_entity_types) {
      try {

        \Drupal::service('multiversion.manager')
          ->disableEntityTypes($types);

      } catch (Exception $e) {

        \Drupal::logger('multiversion_cleanup')->error($e->getMessage());

      }
    }
  }
}